#!/usr/bin/env bash
#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x |   |   |   |   |   | x | profile: list available FPATH functions called functions in a script, or function usages           |
typeset COLOR_ARG fpath fpaths func usedFuncList script scriptType RECURSIVE mainFUNCPATH mainFUNC subFUNCS subFUNC funcDir pattern LISTFUNCTIONS USAGE
RECURSIVE=false
LISTFUNCTIONS=false
USAGE=false
scriptType=file
script=MISSING

# getopts:
typeset _NOARGS _OPT OPTIND
while getopts Fuymckgr:p: _OPT 2>/dev/null
do
{
  case ${_OPT} in
    F) LISTFUNCTIONS=true; script=NOSCRIPT ;;
    u) USAGE=true;   script=NOSCRIPT ;;
    y) COLOR_ARG=-y; script=NOSCRIPT ;;
    m) COLOR_ARG=-m; script=NOSCRIPT ;;
    c) COLOR_ARG=-c; script=NOSCRIPT ;;
    k) COLOR_ARG=-k; script=NOSCRIPT ;;
    g) COLOR_ARG=-g; script=NOSCRIPT ;;
    r) RECURSIVE=true; script="${OPTARG}" ;;
    p) pattern="${OPTARG}" ;;
    *) _NOARGS="${_NOARGS}${_NOARGS+, }-${OPTARG}" ;;
  esac
}
done
shift $((OPTIND - 1))
unset _OPT OPTARG OPTIND
# [ "X${_NOARGS}" != "X" ] && ERROR param "${_NOARGS}"

script="${1:-${script}}"
if [ "X${_NOARGS}" != "X" -o "X${script}" = "XMISSING" ] || ([ -n "${COLOR_ARG}" ] && ! ${USAGE}); then
  echo2 "\
${C}${FUNCNAME}${c}  -F${END}\n\
${C}${FUNCNAME}${c}  -u [-ymckg] [-p pattern] [funcDir]${END}\n\
${C}${FUNCNAME}${c} [-f]         <fullScriptPath | function>${END}\n\
  -F              print all functions per FPATH dir \n\
  -u [funcDir]    usage for *all* functions or funcDir/functions [+name pattern] \n\
  -p pattern      usage for only functions matching pattern \n\
  -ymckg          in conjuction with ${C}usage${END}: alternate row color \n\
                  ${c}fullScriptPath|function${END}: print script/function dependencies \n\
  -r              in conjuction with ${c}fullScriptPath|function${END}: recurse also sub-functions \n\
"
  return 99
fi

[ -z "$FPATH" ] && echo2 "ERROR: FPATH not set..." && return 1

fpaths=${FPATH/#:/.:}
fpaths=${fpaths//::/:.:}
fpaths=${fpaths/%:/:.}
fpaths=${fpaths//:/ }

# -F
if ${LISTFUNCTIONS}; then
  for fpath in ${fpaths}; do
    [ -n "$2" -a "${fpath##*/}" != "$2" ] && continue
    echo "${g8}${fpath}:${w}" && command ls -c ${fpath}
  done
  return 0
fi

# -u
if ${USAGE}; then
  funcDir="$1"
  printf "${SMUL}%-25s  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        ${RMUL}|\n" "funcName"
  for fpath in ${fpaths}; do
    ## if ${funcDir} and current fpath folder == ${funcDir}, then grep #@(p) in the functions of that folder; else continue
    [ -n "${funcDir}" -a "${fpath##*/}" != "${funcDir}" ] && continue
    #awk '/^#@\(p\)/ {sub(/^#@\(p\)/,"",$0); n=split(FILENAME,filename,"/"); printf "%-25s%s\n",filename[n],$0}' ${fpath}/*${pattern}* 2>/dev/null
    awk '{
      if (/^#@\(p\)/) {sub(/^#@\(p\)/,"",$0); n=split(FILENAME,filename,"/"); printf "%-25s%s\n",filename[n],$0; nextfile}
      if (FNR>3) {n=split(FILENAME,filename,"/"); printf "%-25s  |      |   |   |   |   |   |   |   | %-99s|\n",filename[n],"HEADER TODO"; nextfile}
      }' ${fpath}/*${pattern:+${pattern}*} 2>/dev/null
  done | alternate ${COLOR_ARG:--k}
  return 0
fi

# anything else
if (type ${script} 2>/dev/null | grep -q function); then
  scriptType=function
else
  [ ! -s "${script}" ] && ERROR exist "${script}" 0 && return 2
fi

## build usedFuncList with list of calls to FPATH functions in the script/functions
printf ${w}
for fpath in ${fpaths}; do
  for func in $(command ls ${fpath}); do
    if [ ${scriptType} = file ]; then
      grep -wq ${func} "${script}" && usedFuncList="${fpath}/${func} ${usedFuncList}"
    else
      type ${script} | grep -wq ${func} && usedFuncList="${fpath}/${func} ${usedFuncList}"
    fi
  done
done

usedFuncList=$(printf "%s\n" ${usedFuncList} | sort)

## if -f, process found functions to find sub function-calls within each functions
if ${RECURSIVE} && test "${usedFuncList}"; then
  echo "${g}$(echo ${usedFuncList} | wc -w) functions found. ${w}Processing sub functions...${END}"
  for mainFUNCPATH in ${usedFuncList}; do
    printf "${w}%s${g8}\n" ${mainFUNCPATH}
    mainFUNC=${mainFUNCPATH##*/}
    for fpath in ${fpaths}; do
      for subFUNC in $(command ls ${fpath}); do
        # prevent loop:
        [ "${subFUNC}" = "${mainFUNC}" ] || [[ "${subFUNCS}" =~ "${subFUNC} " ]] && continue
        grep -wq ${subFUNC} ${mainFUNCPATH} && echo ${fpath}/${subFUNC} && subFUNCS="${subFUNC} ${subFUNCS}"
      done
    done
  done
else
  printf "${w}%s\n" ${usedFuncList}
fi
