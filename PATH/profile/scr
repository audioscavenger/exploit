# scr - Runs a command in a fresh screen
typeset cmd target _wasVersion
cmd=$1

# We can tell if we are running inside screen by looking
# for the STY environment variable.  If it is not set we
# only need to run the command, but if it is set then
# we need to use screen.

if [ ! $STY ]; then
  command "$@"
else
  # Screen needs to change directory so that
  # relative file names are resolved correctly.
  $Debug && echo2 "command screen -X chdir $PWD"
  command screen -X chdir $PWD
  
  # Ask screen to run the command
  if [ "${cmd}" = "ssh" ]; then
    #info: ssh is run with "-tt" to double force psudo-tty allocation remotely:
    # ${ssh} -Y -qtt $1 env STY=$STY env PROFILE_VERSION_REMOTE=${PROFILE_VERSION} "/bin/bash --rcfile ${DIREXPLOIT}/profile.sh -i"
    target=$2
    $Debug && echo2 "command screen -a -X screen -t \"${target##*@}\" ${ssh} -Y -qtt ${target} env STY=$STY env TTY_WIDTH=$TTY_WIDTH env PROFILE_VERSION_REMOTE=${PROFILE_VERSION} \"/bin/bash --rcfile ${DIREXPLOIT}/profile.sh -i\""
    command screen -a -X screen -t "${target##*@}" ${ssh} -Y -qtt ${target} env STY=$STY env TTY_WIDTH=$TTY_WIDTH env PROFILE_VERSION_REMOTE=${PROFILE_VERSION} "/bin/bash --rcfile ${DIREXPLOIT}/profile.sh -i"
  elif [ "${cmd}" == "wsadmin" ]; then
    target=$2
    _wasVersion=$3
    shift 3
    $Debug && echo2 "command screen -a -X screen -t \"ws_${target##*@}\" ${ssh} -Y -l ${remoteUser} -qtt ${target} env STY=$STY env TTY_WIDTH=$TTY_WIDTH env PROFILE_VERSION_REMOTE=${PROFILE_VERSION} \"/bin/bash --rcfile ${DIREXPLOIT}/profile.sh -i -c 'was ${_wasVersion}; wsadmin $*'\""
    command screen -a -X screen -t "ws_${target##*@}" ${ssh} -Y -l ${remoteUser} -qtt ${target} env STY=$STY env TTY_WIDTH=$TTY_WIDTH env PROFILE_VERSION_REMOTE=${PROFILE_VERSION} "/bin/bash --rcfile ${DIREXPLOIT}/profile.sh -i -c 'was ${_wasVersion}; wsadmin $*'"
  else
    [ "${cmd}" == "vim" ] && typeset VIM=${DIREXPLOIT}/etc/vim/after
    
    $Debug && echo "${FUNCNAME}: typeset VIM=$VIM"
    $Debug && echo "${FUNCNAME}: typeset VIMRUNTIME=$VIMRUNTIME"
    $Debug && read a
    command screen -a -X screen -t "$(eval echo \${${#}##*/})" "$@"
  fi
fi
