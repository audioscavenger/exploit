# USS - Unique Set Size. This is the amount of unshared memory unique to that process (think of it as unique memory). It does not include shared memory. Thus this will under-report the amount of memory a process uses, but is helpful when you want to ignore shared memory.
# PSS - Proportional Set Size. This is what you want. It adds together the unique memory (USS), along with a proportion of its shared memory divided by the number of other processes sharing that memory. Thus it will give you an accurate representation of how much actual physical memory is being used per process - with shared memory truly represented as shared. Think of it as physical memory.
# RSS - Resident Set Size. This is the amount of shared memory plus unshared memory used by each process. If any processes share memory, this will over-report the amount of memory actually used, because the same shared memory will be counted more than once - appearing again in each other process that shares the same memory. Thus it is fairly unreliable, especially when high-memory processes have a lot of forks.
# INFO: on AIX it's quite impossible to guess PSS so PSS=RSS

# TODO: correlate with RSS and ps:
# http://publib.boulder.ibm.com/infocenter/aix/v7r1/index.jsp?topic=%2Fcom.ibm.aix.prftungd%2Fdoc%2Fprftungd%2Fcorr_svmon_ps_outputs.htm
typeset TMP cols regexp pid PIDs

TMP=/tmp/pseft.$$
cols=$((COLUMNS - 4))
[ "x$1" == "x-h" ] && echo2 "pseft [-hdf] [pid | regexp ..]" && exit 99
[ "x$1" == "x-d" ] && typeset Debug=true && shift
[ "x$1" == "x-f" ] && unset cols && shift

# ${sps} -${PsWw}ea -o user,pid,ppid,pcpu,pmem,vsz,rss,time,tty,args >${TMP}
psef >${TMP}
PIDs="$(echo $* | tr ' ' '|')"
[ "${UNAME}" == "Linux" ] && for pid in $(tail -n +2 ${TMP} | command egrep "${PIDs:-.}" | awk '{print $2}'); do pss $pid >${TMP}.smaps.pss.$pid; done

printf "${SMUL}%-8s %8s %8s %4s %4s ${B}%11s %11s${w} %12s %5s %s${END}\n" USER PID PPID "%CPU" "%MEM" PSS RSS TIME TT COMMAND
tail -n +2 ${TMP} | command egrep "${PIDs:-.}" | sort -k 10 -k 3 -k 2 | cut -c1-${cols} | awk -v TMP=${TMP} -v UNAME=${UNAME} '
function commas(d) {
  # http://www.staff.science.uu.nl/~oostr102/docs/nawk/nawk_65.html
  d = d ""
  gsub(",","",d)
  point = index(d,".") - 1
  if (point < 0) point = length(d)
  while (point > 3) {
    point -= 3
    d = substr(d,1,point)","substr(d,point + 1)
  }
  exit d
}
BEGIN {nbUser=0;pssTotal=0;rssTotal=0}
{
uniqUser[$1]++;$1=sprintf("{g8}%-8s{w}",$1)
if (UNAME == "Linux") {"cat "TMP".smaps.pss."$2| getline $6} else {$6=$7}
$2=sprintf("%8s",$2)
$3=sprintf("%8s",$3)
$4=sprintf("%4s",$4)
$5=sprintf("%4s",$5)
pssTotal+=$6
$6=sprintf("{c}%11s",commas($6))
rssTotal+=$7
$7=sprintf("%11s{END}",commas($7))
$8=sprintf("%12s",$8)
$9=sprintf("%5s",$9)
$10=sprintf("%s{g8}",$10)
print}
END {
for (user in uniqUser) nbUser++
printf "{C}%8s %8s %8s %4s %4s %11s %11s{END}\n",nbUser" user","--------","--------","----","----",commas(pssTotal),commas(rssTotal)
}' 2>/dev/null | ${COLORIZE} ${LOWS} ${HIGHS}
$Debug && echo TMP=${TMP} || rm -f ${TMP}*
