#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x |   |   |   | x |   | x | scan the LAN to exit a CSV like: HOSTNAME;TYPE;wasVersion;UNAME;MARCH;KERNELV;bit;MACHTYPE       |
# this function, upon _IP_LIST, will generates a _RESULT_FILE with these columns:
# HOSTNAME;TYPE;wasVersion;UNAME;MARCH;KERNELV;bit;MACHTYPE
# dev-lnx-lib001;generic;0;Linux;i686;3.0;32;i686-suse-linux

typeset TEST _ICREATE _LINE _IP _DEBIP _FINIP _MAX _PLUS _DNSNAME showCSVArch _IP_2_PROCESS HOSTNAME UNAME MARCH KERNELV bit MACHTYPE _IP_LIST _RESULT_FILE dnsServer1 dnsServer2
setDate pingTimeout sshTimeout _SSH_ERROR_IP_LIST _DOWN_IP_LIST FORCE

srvList=${srvList:-${DIREXPLOIT}/etc/ENTITY/${ENTITY}/matrice.servers.list.txt}
ipList=${ipList:-${DIREXPLOIT}/etc/ENTITY/${ENTITY}/matrice.IP.list.txt}
commandSSH=${commandSSH:-"command ${ssh} -qx -T"}
_ICREATE=false
_IP_LIST=${ipList}
_DOWN_IP_LIST=${ipList}.down
_SSH_ERROR_IP_LIST=${ipList}.error
_WINDOWS_IP_LIST=${ipList}.windows
_RESULT_FILE=${srvList}.done
_APP_DIR="exp prex rec dev"
dnsServer1=$(grep nameserver /etc/resolv.conf | head -1)
dnsServer2=$(grep nameserver /etc/resolv.conf | tail -1)
pingCount=1
pingTimeout=1
FORCE=false

! (($#)) && echo2 "${C}${FUNCNAME}${c} [-c (run)] [-d (debug)] [-f (force if no ping)] [-t (timeout)] [-u (user)]${END}" && exit 99
[ ! -s "${_IP_LIST}" ] && ERROR empty "${_IP_LIST}" 0 && exit 1

while getopts :cdftu: _OPT 2>/dev/null; do
{
  case ${_OPT} in
    c)  _ICREATE=true ;;
    d)  typeset Debug=true ;;
    f)  FORCE=true ;;
    t)  commandSSH="${commandSSH} -o ConnectTimeout=1" ;;
    u)  commandSSH="${commandSSH} -o ConnectTimeout=1 -l ${OPTARG}" ;;
    *)  typeset _NOARGS="${_NOARGS}${_NOARGS+, }-${OPTARG}" ;;
  esac
}
done
shift $((OPTIND - 1))
unset _OPT OPTARG OPTIND
[ "X${_NOARGS}" != "X" ] && ERROR param "${_NOARGS}"

if $_ICREATE; then
  $FORCE && rm -f ${_DOWN_IP_LIST} ${_SSH_ERROR_IP_LIST} ${_RESULT_FILE} ${_WINDOWS_IP_LIST}
  touch ${_DOWN_IP_LIST} ${_SSH_ERROR_IP_LIST} ${_RESULT_FILE} ${_WINDOWS_IP_LIST}
  ENTETE_LOG ${w} "STARTING analyzing $(basename ${ipList})" $(cat ${ipList}|wc -l)
  while read _LINE; do
    _IP=$(echo ${_LINE} | cut -d':' -f1)
    _DEBIP=$(echo $_IP | cut -d'.' -f1-3)
    _FINIP=$(echo $_IP | cut -d'.' -f4)
    _MAX=$(echo ${_LINE} | cut -d':' -f2)
    _PLUS=0
    $Debug && echo2 "${m}line found: ${_DEBIP}.${_FINIP}:${_MAX}"

    ENTETE_LOG ${g12} "STARTING analyzing IP list $_LINE : ${_DEBIP}.${_FINIP} - $(( _FINIP + _MAX ))"

    # typeset IFS=\;
    # (
    while (( _PLUS <= _MAX )); do
    sleep 2
      _IP_2_PROCESS="${_DEBIP}.$(( _FINIP + _PLUS ))"
      _PLUS=$(( _PLUS + 1 ))
      grep -q "${_IP_2_PROCESS}" ${_DOWN_IP_LIST} ${_SSH_ERROR_IP_LIST} ${_WINDOWS_IP_LIST} && continue
      #---------------------------------------
      if ping -c ${pingCount} -W ${pingTimeout} ${_IP_2_PROCESS} >/dev/null 2>&1 || $FORCE; then
        _DNSNAME=$(getDNS $_IP_2_PROCESS)
        # HOSTNAME;UNAME;MARCH;KERNELV;bit;MACHTYPE
        # dev-lnx-lib001;Linux;i686;3.0;32;i686-suse-linux
        showCSVArch=$(grep printf ${DIREXPLOIT}/bin/showCSVArch.sh | ${commandSSH} ${_IP_2_PROCESS} /bin/bash 2>&1)
        CR=$?
        if ((CR != 0)); then
          if (netcatt -n ${_IP_2_PROCESS} 3389 >/dev/null 2>&1); then
            echo "${_IP_2_PROCESS}" >>${_WINDOWS_IP_LIST}
            Echo ${g5} DATE "${_IP_2_PROCESS}" "Windows" $CR
          else
            echo "${_IP_2_PROCESS}" >>${_SSH_ERROR_IP_LIST}
            Echo ${g12} DATE "${_IP_2_PROCESS}" "ERROR during ssh ${_IP_2_PROCESS}" $CR
            $Debug && echo2 "${m}$(grep printf ${DIREXPLOIT}/bin/showCSVArch.sh) | ${commandSSH} ${_IP_2_PROCESS} /bin/bash 2>&1"
          fi
        else
          echo "$_DNSNAME;$_IP_2_PROCESS;${showCSVArch}" >>${_RESULT_FILE}
          # while read HOSTNAME UNAME MARCH KERNELV bit MACHTYPE; do
            # echo "$HOSTNAME;$_DNSNAME;$_IP_2_PROCESS;$UNAME;MARCH;KERNELV;bit;MACHTYPE" >>${_RESULT_FILE}
          # done< <(echo ${showCSVArch} | tr ';' ' ')
        fi
      else
        echo ${_IP_2_PROCESS} >>${_DOWN_IP_LIST}
        Echo ${g10} DATE "${_IP_2_PROCESS}" "${_IP_2_PROCESS} is down" down
      fi
      #---------------------------------------
    done
    # ) &
  done <$_IP_LIST
  # wait
  PIED_LOG "${FUNCNAME}" 0 "$(basename ${ipList}) processed"
  ls -l ${_DOWN_IP_LIST} ${_SSH_ERROR_IP_LIST} ${_RESULT_FILE}
fi
