#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x | x |   |   |   | x |   | install EAR with parameters: <-a appName> <-e earFilePath> <[-w server1 ..]|[-c cluster1 ..]> ...  |
[ -z "${wasVersion}" ] && echo2 "ERROR: please set WAS environment before: was <version>" && return 99
typeset USAGE variable appName earFilePath WAS_SERVERS WAS_SERVER WAS_CLUSTERS WAS_CLUSTER virtualHostName httpServerNames httpServerName sharedLibraryName earDestination node serverTupleList

USAGE="
${C}${FUNCNAME}${c} [-xX] <-a appName> <-e earFilePath> <[-w server1 ..]|[-c cluster1 ..]> [-v virtualHostName] [-s sharedLibraryName] [-d earDestination] ${END}
${n}+${w}   appName            ${nn[2]}= appName              ${nn[1]}(showApp     to get list)${END}
${n}+${w}   earFilePath        ${nn[2]}= ear file${END}
${n}+${w}   server1 ..         ${nn[2]}= was or http servers  ${nn[1]}(showServers to get list)${END}
${n}+${w}   cluster1 ..        ${nn[2]}= clusters             ${nn[1]}(showServers to get list)${END}
${n}-${w}   virtualHostName    ${nn[2]}= virtualHostName${END}
${n}-${w}   sharedLibraryName  ${nn[2]}= sharedLibraryName${END}
${n}-${w}   earDestination     ${nn[2]}= ${wasNodeDir:-${wasDmgrDir}${wasDmgrDir:+/installedApps/${cellName}}}${wasNodeDir:+/installedApps/${cellName}}${END}"

(($# < 6)) && echo2 "$USAGE" && return 99
# getopts:
while getopts :a:e:w:c:v:h:s:d:xX _OPT 2>/dev/null
do
{
  case ${_OPT} in
    x) typeset Verbose=true ;;
    X) typeset Debug=true; typeset Verbose=true ;;
    a) appName="${OPTARG}" ;;
    e) earFilePath="${OPTARG}" ;;
    w) WAS_SERVERS="${WAS_SERVERS}${WAS_SERVERS:+ }${OPTARG}" ;;
    c) WAS_CLUSTERS="${WAS_CLUSTERS}${WAS_CLUSTERS:+ }${OPTARG}" ;;
    v) virtualHostName="${OPTARG}" ;;
    s) sharedLibraryName="${OPTARG}" ;;
    d) earDestination="${OPTARG}" ;;
    *)  _NOARGS="${_NOARGS}${_NOARGS+, }-${OPTARG}" ;;
  esac
}
done
shift $((OPTIND - 1))
unset _OPT OPTARG OPTIND
[ "X${_NOARGS}" != "X" ] && ERROR param "${_NOARGS}" 0

for variable in \
appName \
earFilePath \
WAS_SERVERS \
virtualHostName ;
do
  ! exitOnEmptyVariables $variable && ERROR missing "$variable" 0 && return 2;
done

[ ! -f "${earFilePath}" ] && ERROR exist "${earFilePath}" 0 && return 3
[ ! -s "${earFilePath}" ] && ERROR empty "${earFilePath}" 0 && return 4
[ -n "${earDestination}" -a ! -d "${earDestination}" ] && ERROR exist_rep "${earDestination}" 0 && return 5

for node in $wasLocalNodes $wasRemoteNodes; do
  for WAS_SERVER in $WAS_SERVERS; do
    showServers $node | grep -q $WAS_SERVER && serverTupleList="${serverTupleList}${serverTupleList:+,}('$node','$WAS_SERVER')"
  done
done

cd ${DIREXPLOIT}/was/class${JYTHON_VERSION}
# def installApp(appName, earFilePath, serverTupleList, clusterNameList=None, **kwargs):
$Verbose && echo2 "${m}${wasDmgrDir}/bin/wsadmin.sh -conntype ${wasDmgrConnType} -host ${wasLocalDmgrAddress} -port ${wasLocalDmgrPort} -lang jython -profile ${DIREXPLOIT}/was/class${JYTHON_VERSION}/init.py -c \"libApp.installApp('$appName', '$earFilePath', [$serverTupleList], None, MapWebModToVH='$virtualHostName')\"${END}"
$Debug && PAUSE
${wasDmgrDir}/bin/wsadmin.sh -conntype ${wasDmgrConnType} -host ${wasLocalDmgrAddress} -port ${wasLocalDmgrPort} -lang jython -profile ${DIREXPLOIT}/was/class${JYTHON_VERSION}/init.py -c "libApp.installApp('$appName', '$earFilePath', [$serverTupleList], None, MapWebModToVH='$virtualHostName')"
sync
