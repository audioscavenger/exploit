#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x | x |   |   | x | x |   | install Websphere products locally (list them with ${wasCoreName[@]}) from ${repoDir}/websphereX   |
# echo "TODO : WARNING !!!! there may be some big issues with 2 characters versions like 61 or 85 ..."

[ -z "${wasVersion}" ] && echo2 "error: \${wasVersion} is absent, please load WAS environnment first" && return 99
! [ "${BASH_VERSION}" ] && echo2 "THIS SCRIPT WORKS ONLY WITH BASH 2+" && sleep 5 && return 99

typeset baseIDTS _wasRepoDir IDT TAIL PATCH REMOTE PLGIHS PARAMS 
baseIDTS="UPD WAS IHS PLG"
TAIL=false
PATCH=false
REMOTE=false
PLGIHS=false
PARAMS=""

if (( $# < 1 )); then
  echo2 "usage: ${C}${FUNCNAME}${c} [-f] [-p] [-r] [-i] [-d] <${baseIDTS// /|}> [/was/Product/Location] ${nn[1]}(${wasProductLocation}*)${END}"
  echo2 "       ${n}${FUNCNAME}${c} [-f]${nn[2]} tail -f log${END}"
  echo2 "       ${n}${FUNCNAME}${c} [-p]${nn[2]} patch after install${END}"
  echo2 "       ${n}${FUNCNAME}${c} [-r]${nn[2]} PLG: remote = true ${w}(no local-WAS) (+ auto-detection)${END}"
  echo2 "       ${n}${FUNCNAME}${c} [-i]${nn[2]} PLG: locally to IHS path${END}"
  echo2 "       ${n}${FUNCNAME}${c} [-d]${nn[2]} Debug"
  echo2
  echo2 "${c}${SMUL}available WAS${wasVersion} Products:${END} (${c}was_checkVersions${w} = show full list of installed products)"
  for _wasRepoDir in ${wasRepoDir}? ${wasRepoDir}??; do
    [ -f "${_wasRepoDir}/${UNAME}${bit}_suppl/UpdateInstaller/version.txt" ] && printf "${c}UPD %-30s ${w}- Installed: %s${END}\n" "$(grep Version: ${_wasRepoDir}/${UNAME}${bit}_suppl/UpdateInstaller/version.txt)" "$(was_checkVersion UPD false ver)"
    [ -f "${_wasRepoDir}/${UNAME}${bit}/WAS/version.txt" ] && printf "${g}WAS %-30s ${w}- Installed: %s${END}\n" "$(grep Version: ${_wasRepoDir}/${UNAME}${bit}/WAS/version.txt)" "$(was_checkVersion WAS false ver)"
    [ -f "${_wasRepoDir}/${UNAME}${bit}_suppl/IHS/version.txt" ] && printf "${y}IHS %-30s ${w}- Installed: %s${END}\n" "$(grep Version: ${_wasRepoDir}/${UNAME}${bit}_suppl/IHS/version.txt)" "$(was_checkVersion IHS false ver)"
    [ -f "${_wasRepoDir}/${UNAME}${bit}_suppl/plugin/version.txt" ] && printf "${m}PLG %-30s ${w}- Installed: %s${END}\n" "$(grep Version: ${_wasRepoDir}/${UNAME}${bit}_suppl/plugin/version.txt)" "$(was_checkVersion PLG false ver)"
  done
  return 99
fi

while (( $# > 0 )); do
  case "x$1" in
  x-d)  typeset Debug=true; PARAMS="${PARAMS} $1" ;;
  x-f)  TAIL=true; PARAMS="${PARAMS} $1" ;;
  x-p)  [ -d "${wasUPDRoot}" ] && PATCH=true ;;
  x-r)  REMOTE=true ;;
  x-i)  PLGIHS=true ;;
  xUPD)  IDT=$1 ;;
  xWAS)  IDT=$1 ;;
  xIHS)  IDT=$1 ;;
  xPLG)  IDT=$1
         [ ! -d "${wasNodeDir}" ] && REMOTE=true
         ;;
  esac
  shift
done

responsefileTemplate="${wasResponsefilePath}/${wasVersion}/${IDT}/responsefile.${IDT}.template"
if [ "${IDT}" = "PLG" ]; then
  $REMOTE && $PLGIHS && responsefileTemplate="${wasResponsefilePath}/${wasVersion}/${IDT}/responsefile.${IDT}.remote.IHS.template"
  $REMOTE && ! $PLGIHS && responsefileTemplate="${wasResponsefilePath}/${wasVersion}/${IDT}/responsefile.${IDT}.remote.template"
  ! $REMOTE && $PLGIHS && responsefileTemplate="${wasResponsefilePath}/${wasVersion}/${IDT}/responsefile.${IDT}.IHS.template"
fi
responsefileLocal=$(basename ${responsefileTemplate})
responsefileLocal="/tmp/${responsefileLocal%\.*}.txt"

# INFO: extraordinary ! with bash u set arrays with numbers, and call them using just the variable name :
# echo ${wasCoreLongName[$UPD]} === ${wasCoreLongName[UPD]} !!!
[ ! -d "${wasCoreProductRepoDir[${IDT}]}" ] && echo2 "WARNING: NFS ${repoDir} not mounted; trying to mount it..." && mountRepo
[ ! -d "${wasCoreProductRepoDir[${IDT}]}" ] && ERROR exist_rep "${wasCoreProductRepoDir[${IDT}]}" 0 && return 1
[ ! -s "${responsefileTemplate}" ] && ERROR exist "${responsefileTemplate}" 0 && return 2

awk -f ${patterner} ${responsefileTemplate} >${responsefileLocal}

echo "${G}${wasCoreProductRepoDir[${IDT}]}/install -options \"${responsefileLocal}\" -silent -is:log &${END}"
${wasCoreProductRepoDir[${IDT}]}/install -options "${responsefileLocal}" -silent -is:log &
BPID=$!

if $TAIL; then
  # WARNING! works only with GNU tail :
  echo2 "${c}tail --pid=$BPID -n +1 -f ${HOME}/${wasCoreLogName[${IDT}]}/log.txt${END}"
  echo2 "${C}(CTRL+C to stop)${END}"
  echo2 ""
  while $(ps -p $BPID >/dev/null); do
    sleep 2
    [ -f "${HOME}/${wasCoreLogName[${IDT}]}/log.txt" ] && tail --pid=$BPID -n +1 -f ${HOME}/${wasCoreLogName[${IDT}]}/log.txt | cut -c26-
  done
fi

wait $BPID
CR=$?
Echo ${g} DATE "INSTALL ${IDT} ${wasVersion} ${UNAME}${bit}" "${responsefileLocal}" $CR

# redetection of installed products...
was reload
eval wasIDTRoot="\${was${IDT}Root}"
$Debug && echo wasIDTRoot="${wasIDTRoot}"

printf "\n${K}egrep \"EXITCODE|INSTCONF\" ${wasIDTRoot}/logs/install/log.txt${END}\n"
egrep "EXITCODE|INSTCONF" ${wasIDTRoot}/logs/install/log.txt
echo
was_checkVersions ${IDT}

$PATCH && was_patch ${PARAMS} ${IDT} && was_checkVersions ${IDT}

