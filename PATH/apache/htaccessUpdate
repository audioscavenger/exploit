#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x | x |   |   |   | x |   | update a .htaccess with banned IPs through analyzeHttpdBanList                                     |

typeset TMP DISPLAY_FILES HTACCESS_VERSION AUTO_UPDATE ADD_SCAMMERS FORCE regexp mainRewriteDenyLines mainIpBanListLines filteredScamListLines
TMP=/tmp/htaccessUpdate.$RANDOM.tmp
DISPLAY_FILES=false
AUTO_UPDATE=false
ADD_SCAMMERS=
FORCE=false
HTACCESS_VERSION=2.2
grep -q "^Require not ip" "${mainRewriteDeny}" 2>/dev/null && HTACCESS_VERSION=2.4

# case $HTACCESS_VERSION in
# 2.2)  regexp="^deny from" ;;
# 2.4)  regexp="^Require not ip" ;;
# esac

# mainRewriteDenyLines=$(grep "$regexp" "${mainRewriteDeny}" 2>/dev/null | wc -l)
# http://httpd.apache.org/docs/2.4/rewrite/access.html#host-deny
mainRewriteDenyLines=$(wc -l "${mainRewriteDeny}" 2>/dev/null | awk '{print $1}')
mainIpBanListLines=$(cat "${mainIpBanList}" 2>/dev/null | wc -l)
filteredScamListLines=$(wc -l "${filteredScamList}" | awk '{print $1}')

# typeset HELP="${C}${FUNCNAME}${c} [-haf] [mainRewriteDeny] [mainIpBanList] [filteredScamList]${END}
# ${g8}  -h = diz help
# ${g8}  -a = auto update (from existing mainIpBanList: ${mainIpBanList:-NOT FOUND})
# ${g8}  -f = full update with scammers through ${g3}analyzeHttpdBanList ${g8}(only if mainIpBanListLines = 0)
# ${g8}  -F = FORCE update ${g3}mainIpBanList ${g8}before, by running ${g3}analyzeHttpdBanList\n
# ${g3}mainRewriteDeny  = ${g8}${mainRewriteDeny:-NOT FOUND} ${g3}${mainRewriteDeny:+(apache version = $HTACCESS_VERSION; ${mainRewriteDenyLines} lines)}
# ${g3}mainIpBanList = ${g8}${mainIpBanList:-NOT FOUND} ${g3}${mainIpBanList:+(${mainIpBanListLines} lines)}
# ${END}\n"
typeset HELP="${C}${FUNCNAME}${c} [-haf] [mainRewriteDeny] [mainIpBanList] [filteredScamList]${END}
${g8}  -h = diz help
${g8}  -a = auto update (from existing mainIpBanList: ${mainIpBanList:-NOT FOUND})
${g8}  -f = full update with scammers through ${g3}analyzeHttpdBanList ${g8}(only if mainIpBanListLines = 0)
${g8}  -F = FORCE update ${g3}mainIpBanList ${g8}before, by running ${g3}analyzeHttpdBanList\n
${g3}mainRewriteDeny  = ${g8}${mainRewriteDeny:-NOT FOUND} ${g3}${mainRewriteDeny:+(${mainRewriteDenyLines} lines)}
${g3}mainIpBanList = ${g8}${mainIpBanList:-NOT FOUND} ${g3}${mainIpBanList:+(${mainIpBanListLines} lines)}
${END}\n"

! (($#)) && echo2 -ne "${HELP}" && exit 99

typeset _OPT OPTIND OPTARG OPTIND _NOARGS
while getopts :hafF _OPT 2>/dev/null; do
{
  case ${_OPT} in
    h) DISPLAY_FILES=true ;;
    a) AUTO_UPDATE=true; DISPLAY_FILES=true ;;
    f) ADD_SCAMMERS="-f" ;;
    F) FORCE=true ;;
    *)  typeset _NOARGS="${_NOARGS}${_NOARGS+, }-${OPTARG}" ;;
  esac
}
done
shift $((OPTIND - 1))
[ "X${_NOARGS}" != "X" ] && echo2 -ne "${HELP}" && exit 99

mainRewriteDeny="${mainRewriteDeny:-$1}"
mainIpBanList="${mainIpBanList:-$2}"
filteredScamList="${filteredScamList:-$3}"

[ -z "${mainRewriteDeny}" ] && ERROR missing "mainRewriteDeny" 0 && exit 1
[ -z "${mainIpBanList}" ] && ERROR missing "mainIpBanList" 0 && exit 2
[ -z "${filteredScamList}" ] && ERROR missing "filteredScamList" 0 && exit 3
[ ! -s "${mainRewriteDeny}" ] && ERROR exist "${mainRewriteDeny}" 0 && exit 4
[ ! -s "${mainIpBanList}" ] && ERROR exist "${mainIpBanList}" 0 && exit 5

setDate
if $DISPLAY_FILES; then
  Echo ${y} "${FUNCNAME}" "mainRewriteDeny ($HTACCESS_VERSION)" "${mainRewriteDeny} (${mainRewriteDenyLines} lines)" ${mainRewriteDenyLines}
  Echo ${y} "${FUNCNAME}" "mainIpBanList" "${mainIpBanList} (${mainIpBanListLines} lines)" ${mainIpBanListLines}
  Echo ${y} "${FUNCNAME}" "filteredScamList" "${filteredScamList} (${filteredScamListLines} lines)" ${filteredScamListLines}
  ! $AUTO_UPDATE && exit 0
fi

if $AUTO_UPDATE; then
  ((mainRewriteDenyLines)) && ((mainRewriteDenyLines == mainIpBanListLines)) && ! $FORCE && echo2 "${g8}mainRewriteDeny ${w}and ${g8}mainIpBanList ${w}looks the same! (${mainIpBanListLines} lines) - try to update ${g8}mainIpBanList ${w}with ${c}-fF${w} parameters${END}" && exit 0
  ((mainRewriteDenyLines)) && ((mainRewriteDenyLines > mainIpBanListLines)) && ! $FORCE && echo2 "${g8}mainRewriteDeny ${w}looks bigger than ${g8}mainIpBanList ${w}(${mainRewriteDenyLines} > ${mainIpBanListLines}) - try to update ${g8}mainIpBanList ${w}first! ${g3}(analyzeHttpdBanList} lines)${END}" && exit 0
  
  if ! ((mainIpBanListLines)) || $FORCE; then
    analyzeHttpdBanList $ADD_SCAMMERS . $mainRewriteDeny $mainIpBanList $filteredScamList
    (($?)) && ERROR exec "'analyzeHttpdBanList $ADD_SCAMMERS . $mainIpBanList $filteredScamList $mainRewriteDeny' -> run analyzeHttpdBanList manually first" 0 && exit 5
    mainIpBanListLines=$(cat ${mainIpBanList} 2>/dev/null | wc -l)
    ! ((mainIpBanListLines)) && ERROR mainIpBanList "still no IPs to ban found in ${mainIpBanList}... exit" 0 && exit 6
  fi
  
  # OK now, we have a mainIpBanList file full of IPs to ban; let's clean up the htaccess file and update it IF there are more IPs to ban
  ((mainRewriteDenyLines >= mainIpBanListLines)) && Echo ${g} DATE "no new IPs to ban!" "${mainRewriteDeny}: ${mainIpBanListLines} < ${mainRewriteDenyLines}" ${mainRewriteDenyLines} && exit 0
  
  cp "${mainRewriteDeny}" "${mainRewriteDeny}.$DATE"
  # case $HTACCESS_VERSION in
  # 2.2)
    # sed '/^deny from/d' "${mainRewriteDeny}" >${TMP}
    # awk '{print "deny from",$1}' "${mainIpBanList}" >>${TMP}
    # cp ${TMP} "${mainRewriteDeny}"
  # ;;
  # 2.4)
    # sed '/RequireAll/,/\/RequireAll/d' "${mainRewriteDeny}" >${TMP}
    # echo -ne "\n<RequireAll>\n" >>${TMP}
    # echo -ne "Require all granted\n" >>${TMP}
    # awk '{print "Require not ip",$1}' "${mainIpBanList}" >>${TMP}
    # echo -ne "</RequireAll>\n" >>${TMP}
    # cp ${TMP} "${mainRewriteDeny}"
  # ;;
  # esac
  awk '{print $1,"-"}' "${mainIpBanList}" >>${mainRewriteDeny}

  Echo ${g} DATE "mainRewriteDeny updated!" "${mainRewriteDeny}: $((mainIpBanListLines - mainRewriteDenyLines)) lines added" ${mainIpBanListLines}
  read md51 md52 <<<$(md5sum "${mainRewriteDeny}" "${mainRewriteDeny}.$DATE" | awk '{print $1}'); [ "$md51" = "$md52" ] && rm "${mainRewriteDeny}.$DATE"
fi
rm -f /tmp/htaccessUpdate.*
