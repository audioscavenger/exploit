was_patch() {
#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x | x |   |   | x | x |   | install Websphere fixpak from ${repoDir}/websphereX/                                               |
[ -z "${wasVersion}" ] && echo2 "error: \${wasVersion} is absent, please load WAS environnment first" && return 99

# TODO : WARNING !!!! there may be some big issues with 2 characters versions like 61 or 85 ...
# return
# root@val-unx-jee003[7]/usr2/produits/websphere7/UpdateInstaller # was_patch WAS                                                                                                ls: PPC64: No such file or directory
# ls: PPC64: No such file or directory
# ls: 7.0.0.17: No such file or directory
# ls: /usr2/produits/websphere7/AppServer-*.pak: No such file or directory
# ls: PPC64: No such file or directory
# ls: PPC64: No such file or directory
# ls: 7.0.0.17: No such file or directory
# ls: /usr2/produits/websphere7/AppServer-7.0.0-WS-WAS-AixPPC64-FP0000029.pak.OFF: No such file or directory



# http://pic.dhe.ibm.com/infocenter/wasinfo/v7r0/index.jsp?topic=%2Fcom.ibm.websphere.installation.express.doc%2Finfo%2Fexp%2Fae%2Ftins_updi_silfixpk.html
# http://www.edu4eng.com/articles/WAS/install/installFixpack.html
# TODO : verify the listIHS are stand alone or rely on a single binary folder. the loop would be useless then.

# ./update.sh -options /usr2/produits/websphere7/UpdateInstaller/responsefiles/responsefile.PLG.HTTPServer3.7.0.0-WS-PLG-AixPPC32-FP0000027.txt -silent
# /usr2/produits/websphere7/UpdateInstaller/java/jre/bin/java -verbose -cp /usr2/produits/websphere7/UpdateInstaller/update.jar -Xms48m -Xmx384m run -options /usr2/produits/websphere7/UpdateInstaller/responsefiles/responsefile.PLG.HTTPServer3.7.0.0-WS-PLG-AixPPC32-FP0000027.txt -silent


# ./update.sh -silent -W maintenance.package=/usr2/stdpackages/websphere7/pak/7.0.0-WS-PLG-AixPPC32-FP0000027.pak -W product.location=/usr2/produits/IHS/HTTPServer3/Plugins -W update.type=install -OPT skipMSLCheck=false -OPT disableSynchronizedPakversionCheck=true
# /usr2/produits/websphere7/UpdateInstaller/java/jre/bin/java -cp /usr2/produits/websphere7/UpdateInstaller/update.jar -Xms48m -Xmx384m run -silent -W maintenance.package=/usr2/stdpackages/websphere7/pak/7.0.0-WS-PLG-AixPPC32-FP0000027.pak -W product.location=/usr2/produits/IHS/HTTPServer3/Plugins -W update.type=install -OPT skipMSLCheck=false -OPT disableSynchronizedPakversionCheck=true

local BPID CR IDT listIHS Architecture HTTPServerTemplateName restartAdmin restartHttpd IHSName command wasIDTRoot WASSDKmaintenancePackage WASSDKpackageName packageName responseFile packageVersion UPDATE_LOG Version TAIL FORCE ERROR pakRepoDir templateRepoDir
local TMP LOG LOGG
TAIL=false
listIHS=""
FORCE=false
ERROR=false
pakRepoDir=${repoDir}/websphere${wasVersion}/pak
templateRepoDir=${repoDir}/websphere/script/pak

if (( $# < 1 )); then
  echo2 "usage: ${C}${FUNCNAME}${c} [-dfF] [-R pakRepoDir] [-T templateRepoDir] <WAS | [IHS | PLG [IHSname|all*]]>"
  echo2
  echo2 "       ${c}${SMUL}available WAS${wasVersion} maintenancePackages:${END}"
  ls ${pakRepoDir}/${wasVersion}*-WS-*.pak >/dev/null || return 1
  (ls -rt1 ${pakRepoDir}/${wasVersion}*-WS-*.pak; echo2)
  echo2
  echo2 "${c}${SMUL}available products to patch${c} (hit Ctrl+C to stop):${END}"
  was_checkVersions
  return 99
fi

while (( $# > 0 )); do
  case "x$1" in
  x-d)  local Debug=true ;;
  x-f)  TAIL=true ;;
  x-F)  FORCE=true ;;
  x-R)  pakRepoDir=$2; shift ;;
  x-T)  templateRepoDir=$2; shift ;;
  xUPD)  IDT=$1 ;;
  xWAS)  IDT=$1 ;;
  xIHS)  IDT=$1 ;;
  xPLG)  IDT=$1 ;;
  *)     listIHS="${listIHS} $1" ;;
  esac
  shift
done

[ -z "$IDT" ] && ERROR=true
$ERROR && echo2 "ERROR: IDT = $IDT unknown! please use any of the following: ${wasCoreName[@]}" && return 99

listIHS=${listIHS:-all}
responseFileTemplatePath=$(ls -d ${templateRepoDir})
responseFileTemplate=${responseFileTemplatePath}/responsefile.fixpak.template.txt
HTTPServerTemplateName=${HTTPServerTemplateName:-HTTPServer}
eval wasIDTRoot="\${was${IDT}Root}"

[ ! -d "${wasIDTRoot}" ] && ERROR product "product ${IDT} NOT INSTALLED" 0 && return 1
[ -z "${wasUPDRoot}" ] && ERROR product "product UpdateInstaller NOT INSTALLED" 0 && return 2
[ ! -d "${wasUPDRoot}" ] && ERROR exist_rep ${wasUPDRoot} 0 && return 3
[ ! -d "${responseFileTemplatePath}" ] && ERROR exist_rep ${responseFileTemplatePath} 0 && return 4
[ ! -s "${responseFileTemplate}" ] && ERROR exist ${responseFileTemplate} 0 && return 5
! $FORCE && [ "${IDT}" = "WAS" ] && command ps -ef | command grep java | command grep -q AppServer && ERROR java "stop any remaining java process first" 0 && return 6

if [ "${IDT}" = "IHS" -o "${IDT}" = "PLG" ]; then
  if [ "${listIHS}" = "all" -a ! -d "$(was_checkVersion ${IDT} false dir)" ]; then
    cd ${wasIDTRoot}
    listIHS=$(ls -d ${HTTPServerTemplateName}* 2>/dev/null)
    [ -z "${listIHS}" ] && listIHS=root
  else
    listIHS=root
  fi
fi

cd ${wasIDTRoot}
# listIHS can be IHSName, IHSNameList, "all", or anything
# listIHS for WAS and UPD is useless and just preserves compatibility for the loop; so it is set with a compatible string for was_checkVersion: "all"
$Debug && echo2 "START: PWD=$PWD; listIHS=$listIHS"
for IHSName in ${listIHS}
do
  Architecture=$(was_checkVersion ${IDT} false cd ${IHSName})
  [ -z "${Architecture}" ] && Echo ${y} DATE "${IHSName} does not exist" "under ${wasIDTRoot}/" && continue
  
  ################################################
  # these 2 variables are used in the template : #
  export productLocation=$(was_checkVersion ${IDT} false dir ${IHSName})
  export maintenancePackage="$(ls -rt1 ${pakRepoDir}/${wasVersion}*-WS-${IDT}-*${Architecture}-*.pak | tail -1)"
  ################################################
  
  packageName=$(basename ${maintenancePackage})
  packageVersion=${packageName#${wasVersion}*WS-WAS-*${Architecture}-}
  responseFile=${wasUPDRoot}/responsefiles/responsefile.${IDT}.${IHSName}${IHSName:+\.}${packageName%\.*}.txt
  [ ! -s "${maintenancePackage}" ] && ERROR maintenancePackage "NO maintenance Package found !" 0 && continue

  # WASSDK special case :
  if [ "${IDT}" = "WAS" ]; then
    WASSDKmaintenancePackage="$(ls -rt1 ${pakRepoDir}/${wasVersion}*-WS-WASSDK-*${Architecture}-${packageVersion})"
    [ -s "${WASSDKmaintenancePackage}" ] && export maintenancePackage="${maintenancePackage}; ${WASSDKmaintenancePackage}" || $Echo ${y} DATE "WASSDKmaintenancePackage not found !" "${pakRepoDir}/${wasVersion}*-WS-WASSDK-*${Architecture}-${packageVersion}" WARN
  fi
  # --------------------:

  if $Debug; then
    echo2 ${m}IHSName=${M}${IHSName}
    echo2 ${m}listIHS=${M}${listIHS}
    echo2 ${m}packageName=${M}${packageName}
    echo2 ${m}packageVersion=${M}${packageVersion}
    echo2 ${m}maintenancePackage=${M}${maintenancePackage}
    echo2 "${B}awk -f ${patterner} ${responseFileTemplate} >${responseFile}${END}"
  fi
  
  awk -f ${patterner} ${responseFileTemplate} >${responseFile}
  $Debug && PAUSE
  
  [ ! -s "${responseFile}" ] && Echo ${r} DATE "file not generated" "${responseFile}" ERROR && continue
  
  if [ "${IDT}" = "IHS" -a -s "${wasIHSRoot}/${IHSName}/bin/apachectl" ]; then
    ps -ef | grep -q ${wasIHSRoot}/${IHSName}/conf/httpd.conf && ${wasIHSRoot}/${IHSName}/bin/apachectl -k stop -f ${wasIHSRoot}/${IHSName}/conf/httpd.conf && restartHttpd=true || restartHttpd=false
    ps -ef | grep -q ${wasIHSRoot}/${IHSName}/conf/admin.conf && ${wasIHSRoot}/${IHSName}/bin/apachectl -k stop -f ${wasIHSRoot}/${IHSName}/conf/admin.conf && restartAdmin=true || restartAdmin=false
  fi

  command="${wasUPDRoot}/update.sh -options ${responseFile} -silent"
  echo2 ${Y}${command}${END}
  $Debug && PAUSE
  
  ! $FORCE && command ps -ef | command grep java | command grep update.jar && echo2 "${Y}WARNING:${y} another update is running. Kill it before! (or wait)" && PAUSE
  [ -d "${wasUPDRoot}/logs/tmp" ] && rm -rf ${wasUPDRoot}/logs/tmp*
  
  ${command} &
  BPID=$!
  
  if $TAIL; then
    # WARNING! works only with GNU tail :
    echo2 "${c}tail --pid=$BPID -n +1 -f ${wasUPDRoot}/logs/tmp/updatelog.txt${END}"
    echo2 "${C}(CTRL+C to stop)${END}"
    echo2 ""
    while $(ps -p $BPID >/dev/null); do
      sleep 2
      [ -f "${wasUPDRoot}/logs/tmp/updatelog.txt" ] && tail --pid=$BPID -n +1 -f ${wasUPDRoot}/logs/tmp/updatelog.txt
    done
  fi

  wait $BPID
  CR=$?

  # finished install:
  UPDATE_LOG="$(was_checkVersion ${IDT} false dir ${IHSName})/logs/update/${packageName%\.*}.install/updatelog.txt"
  # [ ! -s "${UPDATE_LOG}" ] && UPDATE_LOG=
  
  Version=$(was_checkVersion ${IDT} false version ${IHSName})
  Echo ${g} DATE "UPDATE ${IDT} ${IHSName} ${Architecture} to ${Version}" "${UPDATE_LOG}" $CR
  
  if [ "${IDT}" = "IHS" -a -s "${wasIHSRoot}/${IHSName}/bin/apachectl" ]; then
    ${restartAdmin} && ${wasIHSRoot}/${IHSName}/bin/apachectl -k start -f ${wasIHSRoot}/${IHSName}/conf/admin.conf
    ${restartHttpd} && ${wasIHSRoot}/${IHSName}/bin/apachectl -k start -f ${wasIHSRoot}/${IHSName}/conf/httpd.conf
  fi
done

unset productLocation maintenancePackage
}
