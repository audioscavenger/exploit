setJava() {
local path2Check binPath binary
path2Check=${1:-${JAVA_HOME}}

[ -n "${path2Check}" -a ! -d "${path2Check}" ] && echo2 -e "${C}${FUNCNAME}${c} [JAVA_HOME]${END}\nERROR: ${path2Check} does not exist." && return 1
if [ -d "${path2Check}" ]; then
  $Debug && echo2 "${m}-d ${path2Check}${END}"
  binPath=$(find ${path2Check} -type d -name bin | sort | head -1)
  [ -n "${binPath}" -a -x "${binPath}/java" ] && JAVA_HOME=${binPath%/*}
elif [ -d "${wasWASRoot}" ]; then
  $Debug && echo2 "${m}-d ${wasWASRoot}${END}"
  JAVA_HOME=${wasWASRoot}/java
elif [ "${UNAME}" = "AIX" ]; then
  $Debug && echo2 "${m}${UNAME} = AIX${END}"
  path2Check=$(ls -d1 /usr/java6*64 | tail -1)
  binPath=$(find ${path2Check} -type d -name bin | sort | head -1)
  [ -n "${binPath}" -a -x "${binPath}/java" ] && JAVA_HOME=${binPath%/*}
elif which java >/dev/null 2>&1; then
  $Debug && echo2 "${m}which java${END}"
  binary=$(readlink $(which java)) || binary=$(which java)
  binPath=${binary%/*}
  JAVA_HOME=${binPath%/*}
elif [ -d "${productDir}" ]; then
  $Debug && echo2 "${m}-d ${productDir}${END}"
  path2Check=$(ls -rtd ${productDir}/jdk* 2>/dev/null | tail -1)
  ! test "${path2Check}" && path2Check=$(ls -rtd ${productDir}/{java*,jre*} 2>/dev/null | tail -1)
  binPath=$(find ${path2Check} -type d -name bin | sort | head -1)
  [ -n "${binPath}" -a -x "${binPath}/java" ] && JAVA_HOME=${binPath%/*}
fi

[ -d "${JAVA_HOME}/jre" ] && JRE_HOME=${JAVA_HOME}/jre || JRE_HOME=${JAVA_HOME}
if [ -n "${JAVA_HOME}" -a -n "${JRE_HOME}" ]; then
  $Verbose && echo2 "java found! ${M}JAVA_HOME=${m}${JAVA_HOME}  ${M}JRE_HOME=${m}${JRE_HOME}${END}"
  export JAVA_HOME JRE_HOME
  pathmunge ${JAVA_HOME}/bin
  pathmunge ${JRE_HOME}/bin
  return 0
else
  $Verbose && echo2 "${FUNCNAME}: java not found!"
fi
return 1
}

