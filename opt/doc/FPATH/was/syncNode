syncNode() {
# Usage: syncNode dmgr_host [dmgr_port] [-conntype <type>] [-stopservers]
#       [-restart] [-quiet] [-nowait] [-logfile <filename>] [-replacelog]
#       [-trace] [-username <username>] [-password <password>]
#       [-localusername <localusername>] [-localpassword <localpassword>]
#       [-profileName <profile>] [-help]

# TODO: get the correct SOAP port !!!
# root@dev-unx-ipl001[7]/root # syncNode
   # 2014-07-28 14:06:38 | SOAP credentials check .............. | /usr2/produits/websphere7/AppServer/profiles/Custom01/properties/soap.client.props ................. |  OK   |
# ADMU0116I: Tool information is being logged in file
           # /usr2/produits/websphere7/AppServer/profiles/Custom01/logs/syncNode.log
# ADMU0128I: Starting tool with the Custom01 profile
# ADMU0113E: Program exiting with error:
           # com.ibm.websphere.management.exception.ConnectorException:
           # ADMC0016E: The system cannot create a SOAP connector to connect to
           # host dev-unx-jee001.apriarsa.fr at port dev-unx-jee001.apriarsa.fr.,
           # resulting from: java.net.MalformedURLException: For input string:
           # "dev-unx-jee001.apriarsa.fr"
# ADMU4123E: Ensure that the Deployment Manager is running on the specified host
           # and port.
# ADMU1211I: To obtain a full trace of the failure, use the -trace option.
# ADMU0211I: Error details may be seen in the file:
           # /usr2/produits/websphere7/AppServer/profiles/Custom01/logs/syncNode.log


[ -z "${wasVersion}" ] && ERROR var wasVersion 0 && return 99
[ -z "${wasNodeDir}" -o ! -d "${wasNodeDir}" ] && ERROR wasNodeDir "NO node detected here" 0 && return 1
local RESTART securityEnabled authenticationTarget loginUserid loginPassword conntype wasNodeCLIENT dmgrCONNECTOR_ADDRESS
RESTART=false

conntype=${1:-SOAP}

eval wasNodeCLIENT="\$wasNodeCLIENT${conntype}"
eval dmgrCONNECTOR_ADDRESS="\$dmgr${conntype}_CONNECTOR_ADDRESS"
[ "${conntype}" == "IPC" ] && dmgrHostName=localhost

# grep "<security:Security .*>" ${wasLocalCellsPath}/${cellName}/security.xml | grep -o "activeUserRegistry=\"\w*\""
# eval $(grep -o "activeUserRegistry=\"\w*\"" ${wasLocalCellsPath}/${cellName}/security.xml)
# grep "id=\"${activeUserRegistry}\"" ${wasLocalCellsPath}/${cellName}/security.xml
# tr -d '\n' <${wasLocalCellsPath}/${cellName}/security.xml | grep "<userRegistries.* xmi:id=\"${activeUserRegistry}\" .*</userRegistries>"

if [ -s "${wasNodeCLIENT}" ]; then
  # INFO: eval export from a grep
  $(egrep "^com.ibm.${conntype}.securityEnabled|^com.ibm.${conntype}.authenticationTarget|^com.ibm.${conntype}.loginUserid|^com.ibm.${conntype}.loginPassword" ${wasNodeCLIENT} | sed -e "s/com.ibm.${conntype}.//g" | xargs -I {} bash -c 'eval echo export "{}"')

  ! ([ "$securityEnabled" == "true" ] && [ "$authenticationTarget" == "BasicAuth" ] && [ "$loginUserid" ] && [ "$loginPassword" ]) && ERROR syncNode "authentication unset in in ${wasNodeCLIENT}" 0 && return 1
  Echo ${c} DATE "${conntype} credentials check" "${wasNodeCLIENT}" OK
else
  ERROR syncNode "${conntype} credentials unset in ${wasNodeCLIENT}" 0 && return 2
fi

unset securityEnabled authenticationTarget loginUserid loginPassword
showWas nodeagent && stopNode && RESTART=true

${wasNodeDir}/bin/syncNode.sh ${dmgrHostName} ${dmgrCONNECTOR_ADDRESS} -conntype ${conntype}
$RESTART && startNode
}
