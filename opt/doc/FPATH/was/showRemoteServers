showRemoteServers() {
[ -z "${wasVersion}" ] && ERROR var wasVersion 0 && return 99
local lastRemoteServerNode serverType
serverType=$1

for remoteServerTuple in ${wasRemoteServerTuples}; do
  # KSH88 alternative 'while read' solution :
  # echo $remoteServerTuple | tr ':' ' ' |
  while read remoteServerNode remoteServerName remoteServerType; do
    if [ -z "${serverType}" ]; then
      [ "${lastRemoteServerNode}" != "${remoteServerNode}" ] && ${print} "${c}${remoteServerNode} :${END}\n" && lastRemoteServerNode=${remoteServerNode}

      case "${remoteServerType}" in
      DEPLOYMENT_MANAGER) ${print} "${w}  %-32s\n" "${remoteServerName}" ;;
      WEB_SERVER)         ${print} "${y}  %-32s\n" "${remoteServerName}" ;;
      NODE_AGENT)         ${print} "${N}  %-32s\n" "${remoteServerName}" ;;
      APPLICATION_SERVER) ${print} "${g}  %-32s\n" "${remoteServerName}" ;;
      PROXY_SERVER)       ${print} "${m}  %-32s %s\n" "${remoteServerName}" "${STATUS}" ;;
      *)                  ${print} "${r}  %-32s ${n}(%s)\n" "${remoteServerName}" "${remoteServerType}" ;;
      esac
    else
      case "${serverType}" in
      $remoteServerNode) echo ${remoteServerName} ;;
      $remoteServerName) return 0 ;;
      $remoteServerType) echo ${remoteServerName} ;;
      esac
      continue
    fi
    
    # BASH & KSH93 while read solution :
  done< <(echo ${remoteServerTuple} | tr ':' ' ')
done
}
