was_setEnv()
{
! [ "${BASH_VERSION}" ] && echo "THIS SCRIPT WORKS ONLY WITH BASH 2+" && sleep 5 && return 99
(set -o | grep allexport | grep on >/dev/null) && local allexport=true || local allexport=false; set -a

LOCALHOST_NAME=localhost
# INFO: extraordinary ! with bash u set arrays with numbers, and call them using just the variable name :
# echo ${wasCoreLongName[$UPD]} === ${wasCoreLongName[UPD]} !!!
UPD=0
WAS=1
IHS=2
PLG=3
WASSDK=5

# declare -a wasCoreLongName wasCoreIdName wasCoreFixName wasCoreLogName
# wasCoreLongName=([0]="UpdateInstaller" [1]="WAS" [2]="IHS" [3]="plugin")
wasCoreLongName[$UPD]=UpdateInstaller
wasCoreLongName[$WAS]=WAS
wasCoreLongName[$IHS]=IHS
wasCoreLongName[$PLG]=plugin
wasCoreIdName[$UPD]=UPDI
wasCoreIdName[$WAS]=ND
wasCoreIdName[$IHS]=IHS
wasCoreIdName[$PLG]=PLG
wasCoreFixName[$UPD]=
wasCoreFixName[$WAS]=WebSphere_Application_Server_Network_Deployment
wasCoreFixName[$IHS]=WebSphere_IBM_HTTP_Server
wasCoreFixName[$PLG]=WebSphere_Plugins
wasCoreFixName[$WASSDK]="WebSphere_Java_Runtime_??bit"
wasCoreLogName[$UPD]=updilogs
wasCoreLogName[$WAS]=waslogs
wasCoreLogName[$IHS]=ihslogs
wasCoreLogName[$PLG]=plglogs

local _wasVersion
for _wasVersion in 85 8 7 61 6
do
  # first time set of wasProductLocation in case it's not installed yet:
  eval wasProductLocation${_wasVersion}=${productDir}/websphere${_wasVersion}
  eval wasBinPath${_wasVersion}=${wasRepoDir}${_wasVersion}/${UNAME}${bit}
  eval wasBinPathSuppl${_wasVersion}=${wasRepoDir}${_wasVersion}/${UNAME}${bit}_suppl
  eval wasResponsefilePath${_wasVersion}=${wasRepoDir}/script
  eval wasCoreProductRepoDir${_wasVersion}[\$UPD]="\${wasBinPathSuppl${_wasVersion}}/UpdateInstaller"
  eval wasCoreProductRepoDir${_wasVersion}[\$WAS]="\${wasBinPath${_wasVersion}}/WAS"
  eval wasCoreProductRepoDir${_wasVersion}[\$IHS]="\${wasBinPathSuppl${_wasVersion}}/IHS"
  eval wasCoreProductRepoDir${_wasVersion}[\$PLG]="\${wasBinPathSuppl${_wasVersion}}/plugin"

  # when using thinClient, JYTHON_VERSION is replaced by thinClient version 
  case ${_wasVersion} in
  6)
    eval JYTHON_VERSION${_wasVersion}="2.1.0"
    eval WAS_VERSION${_wasVersion}="6.0.0"
    ;;
  61)
    eval JYTHON_VERSION${_wasVersion}="2.2.1"
    eval WAS_VERSION${_wasVersion}="6.1.0"
    ;;
  7)
    eval JYTHON_VERSION${_wasVersion}="2.2.1"
    eval WAS_VERSION${_wasVersion}="7.0.0"
    ;;
  8)
    eval JYTHON_VERSION${_wasVersion}="2.2.1"
    eval WAS_VERSION${_wasVersion}="8.0.0"
    ;;
  85)
    eval JYTHON_VERSION${_wasVersion}="2.2.1"
    eval WAS_VERSION${_wasVersion}="8.5.5"
    ;;
  esac
  
  eval WAS_USER${_wasVersion}=${WAS_USER_default:-was${_wasVersion}}

  wasIHSRoot=$(realpath ${productDir}/IHS)
  # special APRIA: sometimes wasIHSRoot contains subdir like IHSNames...
  # [ -s "${wasIHSRoot}/bin/versionInfo.sh" ] && eval wasIHSRoot${_wasVersion}="${wasIHSRoot}"
  [ -d "${wasIHSRoot}" ] && eval wasIHSRoot${_wasVersion}="${wasIHSRoot}" || wasIHSRoot=$(realpath /usr3/produits/IHS)
  [ -d "${wasIHSRoot}" ] && eval wasIHSRoot${_wasVersion}="${wasIHSRoot}"
  
  wasPLGRoot=$(realpath ${wasIHSRoot}/Plugins)
  [ -s "${wasPLGRoot}/bin/versionInfo.sh" ] && eval wasPLGRoot${_wasVersion}="${wasPLGRoot}" || wasPLGRoot=$(realpath /usr3/produits/Plugins)
  [ -s "${wasPLGRoot}/bin/versionInfo.sh" ] && eval wasPLGRoot${_wasVersion}="${wasPLGRoot}"

  wasRoot=$(realpath ${productDir}/[wW]eb[sS]phere${_wasVersion})
  [ ! -d "${wasRoot}" ] && wasRoot=$(realpath /usr3/produits/[wW]eb[sS]phere${_wasVersion})
  [ ! -d "${wasRoot}" ] && continue
  eval wasRoot${_wasVersion}="${wasRoot}"
  eval wasProductLocation${_wasVersion}="${wasRoot}"

  [ ! -d "${wasPLGRoot}" ] && wasPLGRoot=${wasRoot}/Plugins
  [ -s "${wasPLGRoot}/bin/versionInfo.sh" ] && eval wasPLGRoot${_wasVersion}="${wasPLGRoot}"

  wasUPDRoot=${wasRoot}/UpdateInstaller
  [ -s "${wasUPDRoot}/bin/versionInfo.sh" ] && eval wasUPDRoot${_wasVersion}="${wasUPDRoot}"

  wasWASRoot=$(realpath ${wasRoot}/AppServer)
  [ ! -s "${wasWASRoot}/bin/versionInfo.sh" ] && continue
  eval wasWASRoot${_wasVersion}="${wasWASRoot}"
  eval JAVA_HOME${_wasVersion}="${wasWASRoot}/java"
  eval JRE_HOME${_wasVersion}="${wasWASRoot}/java/jre"
  eval WAS_HOME${_wasVersion}="${wasWASRoot}"

  wasProfDir=$(realpath ${wasWASRoot}/profiles)
  [ ! -d "${wasProfDir}" ] && wasProfDir=$(realpath ${wasRoot}/profiles)
  [ ! -d "${wasProfDir}" ] && continue
  [ -d "${wasProfDir}" ] && eval wasProfDir${_wasVersion}="${wasProfDir}"

  # wasProfiles detection upon some smart keywords
  wasProfiles="$(ldir ${wasProfDir})"
  eval wasProfiles${_wasVersion}="\"${wasProfiles}\""

  # setting up NODE profile paths
  # if you have more than on node profile, you WILL have issues...
  wasNodeDir=$(realpath ${wasProfDir}/${wasNodeProfileName})
  [ ! -d "${wasNodeDir}" ] && wasNodeDir=$(realpath ${wasProfDir}/[AC]*01)
  if [ -d "${wasNodeDir}" ]; then
    wasNodeAppDir=$(realpath ${wasNodeDir}/config/cells/*Cell01/applications)
    wasNodeProfile=$(basename ${wasNodeDir})
    eval wasNodeCLIENTSOAP${_wasVersion}="${wasNodeDir}/properties/soap.client.props"
    eval wasNodeCLIENTSAS${_wasVersion}="${wasNodeDir}/properties/sas.client.props"
    eval wasNodeCLIENTSSL${_wasVersion}="${wasNodeDir}/properties/ssl.client.props"
    eval wasNodeCLIENTIPC${_wasVersion}="${wasNodeDir}/properties/ipc.client.props"
  [ -d "${wasNodeDir}" ] && eval wasNodeDir${_wasVersion}="${wasNodeDir}"
  [ -n "${wasNodeProfile}" ] && eval wasNodeProfile${_wasVersion}="${wasNodeProfile}"
  [ -d "${wasNodeAppDir}" ] && eval wasNodeAppDir${_wasVersion}="${wasNodeAppDir}"
  eval wasApplicationsDir${_wasVersion}="${wasNodeAppDir}"
  eval wasNodeLogsDir${_wasVersion}=${wasNodeDir}/logs
  else
    unset wasNodeDir
  fi
  
  # setting up DMGR profile paths
  wasDmgrDir=$(realpath ${wasProfDir}/${wasDmgrProfileName})
  [ ! -d "${wasDmgrDir}" ] && wasDmgrDir=$(realpath ${wasProfDir}/[Dd]mgr)
  [ ! -d "${wasDmgrDir}" ] && wasDmgrDir=$(realpath ${wasProfDir}/[Dd]mgr*)
  if [ -d "${wasDmgrDir}" ]; then
    wasDmgrAppDir=$(realpath ${wasDmgrDir}/config/cells/*Cell01/applications)
    wasDmgrProfile=$(basename ${wasDmgrDir})
    eval wasDmgrCLIENTSOAP${_wasVersion}="${wasDmgrDir}/properties/soap.client.props"
    eval wasDmgrCLIENTSAS${_wasVersion}="${wasDmgrDir}/properties/sas.client.props"
    eval wasDmgrCLIENTSSL${_wasVersion}="${wasDmgrDir}/properties/ssl.client.props"
    eval wasDmgrCLIENTIPC${_wasVersion}="${wasDmgrDir}/properties/ipc.client.props"
  [ -d "${wasDmgrDir}" ] && eval wasDmgrDir${_wasVersion}="${wasDmgrDir}"
  [ -n "${wasDmgrProfile}" ] && eval wasDmgrProfile${_wasVersion}="${wasDmgrProfile}"
  [ -d "${wasDmgrAppDir}" ] && eval wasDmgrAppDir${_wasVersion}="${wasDmgrAppDir}"
  eval wasApplicationsDir${_wasVersion}="${wasDmgrAppDir}"
  eval wasDmgrLogsDir${_wasVersion}=${wasDmgrDir}/logs
  else
    unset wasDmgrDir
  fi

  [ -d "${wasDmgrDir}" ] && profDir=${wasDmgrDir} || profDir=${wasNodeDir}
  if [ -d "${profDir}" ]; then
    wasLogsDir=${profDir}/logs
    eval wasLogsDir${_wasVersion}="${wasLogsDir}"
    wasLocalConfDir="${profDir}"
    eval wasLocalConfDir${_wasVersion}="${wasLocalConfDir}"
    wasLocalNodesDir=$(realpath ${profDir}/config/cells/*Cell01/nodes)
    eval wasLocalNodesDir${_wasVersion}="${wasLocalNodesDir}"
    eval PROFILE_ROOT${_wasVersion}="${profDir}"
    eval CONFIG_ROOT${_wasVersion}="${profDir}/config"
    wasLocalCellsPath=$(realpath ${profDir}/config/cells)
    eval wasLocalCellsPath${_wasVersion}="${wasLocalCellsPath}"
    cellName=$(basename ${wasLocalCellsPath}/*Cell*)
    eval cellName${_wasVersion}="${cellName}"
    # cells/val-unx-jee001Cell01/nodes/val-unx-jee001CellManager01/serverindex.xml
    # <specialEndpoints xmi:id="NamedEndPoint_4" endPointName="SOAP_CONNECTOR_ADDRESS">
    # <endPoint xmi:id="EndPoint_4" host="val-unx-jee001.apriarsa.fr" port="8879"/>
    wasDmgrConfigPath=$(realpath ${wasLocalConfDir}/config/cells/${cellName}/nodes/*Manager*)
    eval wasDmgrConfigPath${_wasVersion}="${wasDmgrConfigPath}"
    eval wasDmgrNodeName${_wasVersion}=$(basename ${wasDmgrConfigPath})
    if [ -d "${wasDmgrConfigPath}" ]; then
      
      BOOTSTRAP_NAME=$(grep BOOTSTRAP_ADDRESS ${wasDmgrConfigPath}/serverindex.xml | awk -F\" '/NamedEndPoint/ {print $2}' | cut -c6-)
      eval $(grep ${BOOTSTRAP_NAME:-NOTFOUND} ${wasDmgrConfigPath}/serverindex.xml | awk -F\" -v _wasVersion=${_wasVersion} '/host=/ {printf "export dmgrBOOTSTRAP_ADDRESS=%s",$4}')
      $(grep ${BOOTSTRAP_NAME:-NOTFOUND} ${wasDmgrConfigPath}/serverindex.xml | awk -F\" -v _wasVersion=${_wasVersion} '/port=/ {printf "export dmgrBOOTSTRAP_PORT=%s",$6}')

      SOAP_CONNECTOR_NAME=$(grep SOAP_CONNECTOR_ADDRESS ${wasDmgrConfigPath}/serverindex.xml | awk -F\" '/NamedEndPoint/ {print $2}' | cut -c6-)
      eval $(grep ${SOAP_CONNECTOR_NAME:-NOTFOUND} ${wasDmgrConfigPath}/serverindex.xml | awk -F\" -v _wasVersion=${_wasVersion} '/host=/ {printf "export dmgrHostName=%s export dmgrSOAP_CONNECTOR_ADDRESS=%s",$4,$4}')
      $(grep ${SOAP_CONNECTOR_NAME:-NOTFOUND} ${wasDmgrConfigPath}/serverindex.xml | awk -F\" -v _wasVersion=${_wasVersion} '/port=/ {printf "export dmgrSOAP_CONNECTOR_PORT=%s",$6}')

      IPC_CONNECTOR_NAME=$(grep IPC_CONNECTOR_ADDRESS ${wasDmgrConfigPath}/serverindex.xml | awk -F\" '/NamedEndPoint/ {print $2}' | cut -c6-)
      eval $(grep ${IPC_CONNECTOR_NAME:-NOTFOUND} ${wasDmgrConfigPath}/serverindex.xml | awk -F\" -v _wasVersion=${_wasVersion} '/host=/ {printf "export dmgrIPC_CONNECTOR_ADDRESS=%s",$4}')
      $(grep ${IPC_CONNECTOR_NAME:-NOTFOUND} ${wasDmgrConfigPath}/serverindex.xml | awk -F\" -v _wasVersion=${_wasVersion} '/port=/ {printf "export dmgrIPC_CONNECTOR_PORT=%s",$6}')

      [ -n "${BOOTSTRAP_NAME}" ] && eval wasLocalDmgrConnType=JMS160RMI
      [ -n "${SOAP_CONNECTOR_NAME}" ] && eval wasLocalDmgrConnType=SOAP
      [ -d "${wasDmgrDir}" ] && [ -n "${IPC_CONNECTOR_NAME}" ] && eval wasLocalDmgrConnType=IPC
      eval dmgrHostName${_wasVersion}=${dmgrHostName}
      # wasDmgrConnType is set in ${DIREXPLOIT}/etc/ENTITY/${ENTITY}/profile.ENTITY.sh
      # TODO: it currently preempt the detected value, only SOAP is working for the moment
      eval eval wasLocalDmgrConnType${_wasVersion}=${wasLocalDmgrConnType:-${wasDmgrConnType}}
      eval dmgrBOOTSTRAP_ADDRESS${_wasVersion}=${dmgrBOOTSTRAP_ADDRESS:-localhost}
      eval dmgrBOOTSTRAP_PORT${_wasVersion}=${dmgrBOOTSTRAP_PORT}
      eval eval dmgrSOAP_CONNECTOR_ADDRESS${_wasVersion}=${dmgrSOAP_CONNECTOR_ADDRESS:-localhost}
      eval dmgrSOAP_CONNECTOR_PORT${_wasVersion}=${dmgrSOAP_CONNECTOR_PORT}
      eval eval dmgrIPC_CONNECTOR_ADDRESS${_wasVersion}=${dmgrIPC_CONNECTOR_ADDRESS:-localhost}
      eval dmgrIPC_CONNECTOR_PORT${_wasVersion}=${dmgrIPC_CONNECTOR_PORT}
      
      eval wasLocalDmgrAddress${_wasVersion}=\${dmgr${wasLocalDmgrConnType}_CONNECTOR_ADDRESS}
      eval wasLocalDmgrPort${_wasVersion}=\${dmgr${wasLocalDmgrConnType}_CONNECTOR_PORT}
    fi
    
    # TODO: do not rely anymore on nodeName to detect if it's local or not
    eval wasLocalNodes${_wasVersion}='$(ls ${wasLocalNodesDir}/ 2>/dev/null|grep "${HOSTNAME}")'
    eval wasRemoteNodes${_wasVersion}='$(ls ${wasLocalNodesDir}/ 2>/dev/null|egrep -v "Manager|${HOSTNAME}")'
    $Debug && echo "wasLocalServerTuples=\$(was_parseServerindex $(eval echo \${wasLocalNodes${_wasVersion}}))"
    wasLocalServerTuples=$(was_parseServerindex $(eval echo \${wasLocalNodes${_wasVersion}}))
    $Debug && echo "wasRemoteServerTuples=\$(was_parseServerindex $(eval echo \${wasRemoteNodes${_wasVersion}}))"
    wasRemoteServerTuples=$(was_parseServerindex $(eval echo \${wasRemoteNodes${_wasVersion}}))
    eval wasLocalServerTuples${_wasVersion}='"${wasLocalServerTuples}"'
    eval wasRemoteServerTuples${_wasVersion}='"${wasRemoteServerTuples}"'
  fi

  unset wasRoot wasWASRoot wasProfDir wasProfiles profile wasDmgrDir wasNodeDir wasDmgrAppDir wasNodeAppDir wasDmgrProfile wasNodeProfile profDir wasLocalConfDir wasLocalNodesDir wasLocalNodes wasRemoteNodes wasLocalServerTuples wasRemoteServerTuples _wasVersion wasLocalCellsPath wasLocalNodesDir wasApplicationsDir cellName wasDmgrConfigPath IPC_CONNECTOR_ADDRESS SOAP_CONNECTOR_ADDRESS host port wasLocalDmgrConnType wasIHSRoot wasPLGRoot
done

unset WAS_USER wasRoot wasWASRoot wasPLGRoot wasUPDRoot wasIHSRoot wasProfDir wasProfiles profile wasDmgrDir wasNodeDir wasDmgrAppDir wasNodeAppDir wasDmgrProfile wasNodeProfile profDir wasLocalConfDir wasLocalNodesDir wasLocalNodes wasRemoteNodes wasLocalServerTuples wasRemoteServerTuples _wasVersion wasLocalNodesDir wasApplicationsDir cellName wasDmgrConfigPath

# http://pic.dhe.ibm.com/infocenter/wasinfo/v7r0/index.jsp?topic=%2Fcom.ibm.websphere.express.doc%2Finfo%2Fexp%2Fae%2Frxml_commandline.html
# wsadmin='cd /usr2/exploit/was/class${JYTHON_VERSION};${wasDmgrDir}/bin/wsadmin.sh -lang jython -profile init.py'
wsadmin='cd ${DIREXPLOIT}/was/class${JYTHON_VERSION}; ${rlwrap_jython} ${wasDmgrDir}/bin/wsadmin.sh -conntype ${wasDmgrConnType} -host ${wasLocalDmgrAddress} -port ${wasLocalDmgrPort} -lang jython -profile ${DIREXPLOIT}/was/class${JYTHON_VERSION}/init.py'
wsadminIPC='cd ${DIREXPLOIT}/was/class${JYTHON_VERSION}; ${rlwrap_jython} ${wasDmgrDir}/bin/wsadmin.sh -conntype IPC -ipchost localhost -port ${dmgrIPC_CONNECTOR_PORT} -lang jython -profile ${DIREXPLOIT}/was/class${JYTHON_VERSION}/init.py'
wsadminRMI='cd ${DIREXPLOIT}/was/class${JYTHON_VERSION}; ${rlwrap_jython} ${wasDmgrDir}/bin/wsadmin.sh -conntype RMI -host ${dmgrBOOTSTRAP_ADDRESS} -port ${dmgrBOOTSTRAP_PORT} -lang jython -profile ${DIREXPLOIT}/was/class${JYTHON_VERSION}/init.py'
wsadminSOAP='cd ${DIREXPLOIT}/was/class${JYTHON_VERSION}; ${rlwrap_jython} ${wasDmgrDir}/bin/wsadmin.sh -conntype SOAP -host ${dmgrBOOTSTRAP_ADDRESS} -port ${dmgrSOAP_CONNECTOR_PORT} -lang jython -profile ${DIREXPLOIT}/was/class${JYTHON_VERSION}/init.py'
thinClient='${DIREXPLOIT}/was/thinClient/thinClient.sh'
thinClientRMI='${DIREXPLOIT}/was/thinClient/thinClient.sh -host ${dmgrBOOTSTRAP_ADDRESS} -port ${dmgrBOOTSTRAP_PORT} -conntype RMI'
thinClientSOAP='${DIREXPLOIT}/was/thinClient/thinClient.sh -host ${dmgrSOAP_CONNECTOR_ADDRESS} -port ${dmgrSOAP_CONNECTOR_PORT} -conntype SOAP'
thinClientIPC='${DIREXPLOIT}/was/thinClient/thinClient.sh -host localhost -port ${dmgrIPC_CONNECTOR_PORT} -conntype IPC'

if $TTY; then
  alias cd_upd='cd ${wasUPDRoot}'
  alias cd_ihs='cd ${wasIHSRoot}'
  alias cd_plg='cd ${wasPLGRoot}'
  alias cd_was='cd ${wasWASRoot}'

  alias cd_prof='cd ${wasProfDir}'
  # if [ -d "${wasDmgrDir}" ]; then
  alias cd_dmgr='cd ${wasDmgrDir}'
  alias cd_conf='cd ${CONFIG_ROOT}'
  alias cd_ear='cd ${wasApplicationsDir}'
  alias stopManager='${wasDmgrDir}/bin/stopManager.sh'
  alias startManager='${wasDmgrDir}/bin/startManager.sh'

  #alias wsadmin='eval ${wsadmin}'
  alias wsadminRMI='eval ${wsadminRMI}'
  alias wsadminSOAP='eval ${wsadminSOAP}'
  alias wsadminIPC='eval ${wsadminIPC}'

  alias thinClient='eval ${thinClient}'
  alias thinClientRMI='eval ${thinClientRMI}'
  alias thinClientSOAP='eval ${thinClientSOAP}'
  alias thinClientIPC='eval ${thinClientIPC}'
  # fi

  # if [ -d "${wasNodeDir}" ]; then
  alias cd_node='cd ${wasNodeDir}'
  alias stopNode='${wasNodeDir}/bin/stopNode.sh'
  alias startNode='${wasNodeDir}/bin/startNode.sh'
  alias showNodes='echo $wasLocalNodes $wasRemoteNodes'
  alias showLocalNodes='echo $wasLocalNodes'
  alias showRemoteNodes='echo $wasRemoteNodes'
  alias ss='showServers'
  alias sl='showLocalServers'
  alias sr='showRemoteServers'
  # fi

  alias cd_logs='cd ${wasLogsDir}'
  alias cd_app='cd ${wasNodeDir:-${wasDmgrDir}${wasDmgrDir:+/installedApps/${cellName}}}${wasNodeDir:+/installedApps/${cellName}}'

  eval rlwrap_jython_logs='${wasNodeDir:-${wasDmgrDir}${wasDmgrDir:+/logs}}${wasNodeDir:+/logs}'
  rlwrap_jython="rlwrap -b '(){}[],+=&^%$#@\;|\`' -R -H ${rlwrap_jython_logs}/wsadmin.history.$LOGNAME.$ORIGIN.log -f ${DIREXPLOIT}/etc/rlwrap/rlwrap.jython.dictionary.txt -r -pBlue -z ${DIREXPLOIT}/etc/rlwrap/rlwrap.jython.prompt.pl"

fi

! ${allexport} && set +a
}
