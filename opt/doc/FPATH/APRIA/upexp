upexp() {
#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |Linux | x | x |   |   |   | x | x | upload profile to a remote server                                                                  |
if [ "${HOSTNAME}" != "adm-unx-nimpri" -a "${HOSTNAME}" != "qoolbox64" ]; then
  ERROR host "upexp ONLY on ${C}adm-unx-nimpri${END}" 0
  echo2 "${C}${FUNCNAME}${c} [-rd] <server|all> [[generic*|ihs|was|dmgr] [versions ..]]"
  echo2 "${C}${FUNCNAME}${c} [-rd] <server|all> [/localPathToSingleFile]"
  return 99
fi

local removeRemoteContent remoteCSVArch singleFile serverParam serverType wasVersions hostType TMP CR RSYNC_AIX color sshUser commandSSH
removeRemoteContent=false
sshUser=${remoteUser:-root}
commandSSH="command ${ssh} -o ConnectTimeout=1 -qx -l ${sshUser} -T"
singleFile=false
hostType=DNS
CR=1
RSYNC_AIX="--rsync-path=${DIREXPLOIT}/bin/AIX/rsync"
TMP=$(mktemp -t ${FUNCNAME}.XXXXXX)

[ "x$1" == "x-r" ] && removeRemoteContent=true && shift
[ "x$1" == "x-d" ] && local Debug=true && local Verbose=true && shift

serverParam="$1"
serverType=${2:-generic}
wasVersions="${@:3}"
wasVersions="${wasVersions:-0}"
remoteUser=${remoteUser:-root}

(( $# < 1 )) && echo2 ${R}"USAGE: ${C}${FUNCNAME}${c} [-r] <\"server1 ..\"|all> [generic*|ihs|was|dmgr|kheops|hkeops]${C}|${c}[/path/file] [6|61|7]"${END} && ${awk} 'NR>1 {FS=";";print $1}' ${srvList} && return 99

[ "${serverParam}" == "all" ] && remoteServerList=$(${awk} 'NR>1 {FS=";";print $1}' ${srvList}) || remoteServerList=${serverParam}
for remoteServer in ${remoteServerList}
do
  if [ "${serverParam}" != "all" ]; then
    [[ ${remoteServer} == [1-9]*\.*\.*\.* ]] && hostType=IP
    if [ "${hostType}" == "DNS" ]; then
      host ${remoteServer}.apriarsa.fr >/dev/null 2>&1 | egrep "can't find|not found|SERVFAIL" && ERROR dns ${remoteServer} 0 && return 1
      # new server: adding it to the $srvList
      if ! grep -qi "^${remoteServer};" ${srvList}; then
        ! ping -c 3 ${remoteServer} >/dev/null 2>&1 && ERROR ping ${remoteServer} 0 && return 2
        remoteCSVArch=$(grep printf ${DIREXPLOIT}/bin/showCSVArch.sh | ${commandSSH} ${remoteServer} /bin/bash 2>&1)
        ${print} "${remoteServer};${serverType};${wasVersions}${remoteCSVArch:+;}${remoteCSVArch}\n" >>${srvList}
      fi
    fi
  fi
  grep -i "^${remoteServer};" ${srvList} | tr ';' ' ' |\
  while read -r server serverType wasVersions remoteCSVArch; do
    remotePath="${DIREXPLOIT}/"
    localFileList="${DIREXPLOIT}/profile.apria.sh ${DIREXPLOIT}/FPATH ${DIREXPLOIT}/bin ${DIREXPLOIT}/lib ${DIREXPLOIT}/etc ${DIREXPLOIT}/share"
    case ${serverType} in
    ihs)      color=${y} ;;
    was)      color=${g} ;;
    dmgr)     color=${Y} ; localFileList="${localFileList} ${DIREXPLOIT}/was";;
    kheops)   color=${gg[1]} ;;
    hkheops)  color=${g12} ;;
    generic)  color=${w} ;;
    *)        [ ! -f "${serverType}" ] && ERROR exist "${remoteServer}: ${serverType}" 0 && CR=3 && return $CR
              localFileList="${serverType}" && remotePath=${DIREXPLOIT}/${serverType} && singleFile=true ;;
    esac
    
    $removeRemoteContent && ! $singleFile && command ${ssh} -qnx -l ${remoteUser} ${remoteServer} "rm -r ${localFileList} 2>/dev/null" 2>/dev/null && ${print} "%s %-30s : %10s : %10s : %s${END}\n" ${c} ${remoteServer} ${serverType} "${wasVersions}" "remove ${localFileList}:  ${OK}"

    #-------------------------------------------------------------------------------------------------
    ${print} "%s %-30s : %10s : %10s : ${END}" ${color} ${remoteServer} ${serverType} "${wasVersions}"
    $Debug && echo "command rsync -Walv -e "${ssh}" --progress ${localFileList} ${remoteUser}@${remoteServer}:${remotePath}"
    command rsync -Walv -e "${ssh}" --progress ${localFileList} ${remoteUser}@${remoteServer}:${remotePath} >${TMP} 2>&1
    CR=$?
    if [ $CR -eq 12 -o $CR -eq 127 ]; then
      $Debug && echo "command rsync -Walv ${RSYNC_AIX} -e "${ssh}" --progress ${localFileList} ${remoteUser}@${remoteServer}:${remotePath}"
      command rsync -Walv ${RSYNC_AIX} -e "${ssh}" --progress ${localFileList} ${remoteUser}@${remoteServer}:${remotePath} >>${TMP} 2>&1
      CR=$?
    fi
    if (( CR != 0 )); then
      $Debug && cat ${TMP}
      # first time transfer:
      $Debug && command ${ssh} -qnx -l ${remoteUser} ${remoteServer} "mkdir -p ${DIREXPLOIT}" | tee -a ${TMP} 
      command ${ssh} -qnx -l ${remoteUser} ${remoteServer} "mkdir -p ${DIREXPLOIT}" >>${TMP} 2>&1 
      $Debug && echo "command ${scp} -vrp ${localFileList} ${remoteUser}@${remoteServer}:${remotePath}" | tee -a ${TMP} 
      command ${scp} -vrp ${localFileList} ${remoteUser}@${remoteServer}:${remotePath} >>${TMP} 2>&1 && CR=0
      command ${ssh} -qnx -l ${remoteUser} ${remoteServer} sync >>${TMP} 2>&1 
      #-------------------------------------------------------------------------------------------------
      (( CR == 0 )) && ${print} "%4s files sent ... ${OK}\n" $(grep 'Sending file timestamps' ${TMP} | wc -l) || (echo ${KO}; echo ${TMP})
    else
      #-------------------------------------------------------------------------------------------------
      (( CR == 0 )) && ${print} "%4s files sent ... ${OK}\n" $(grep 'xfer#' ${TMP} | wc -l) || (echo ${KO}; echo ${TMP})
    fi
    $Debug && cat ${TMP}
    # http://tldp.org/LDP/abs/html/internalvariables.html
    # INFO: (( SHLVL == 2 )) means we're calling this function like this: tty(0) -> screen(1) -> upexp(2)
    # INFO: (( SHLVL == 3 )) means we're calling this function like this: tty(0) -> screen(1) -> upexp_many(2) -> upexp(3)
    (( SHLVL == 2 )) && echoHS "upexp ${remoteServer}: CR=$CR"
    break
  done
done
unset remoteServerList remoteServer serverType wasVersions localFileList remotePath found
((CR == 0)) && rm -f ${TMP}
return $CR
}
