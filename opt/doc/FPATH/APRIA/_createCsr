createCsr() {
# https://www.sslshopper.com/article-most-common-java-keytool-keystore-commands.html
# http://docs.continuent.com/tungsten-replicator-2.2/deployment-ssl-stores.html
# https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html

########
# INIT ###########################################################################
########
local ORG LOC ST CO OU CN dname keyalg keysize
keyalg="${defaultKeyalg:-rsa}"
keysize="${defaultKeysize:-2048}"
ORG="${defaultORG}"
LOC="${defaultLOC}"
ST="${defaultST}"
CO="${defaultCO}"

if ! (( $# )); then
  echo2 "${C}${FUNCNAME} ${B}[-dv] ${c}<-k keystore> ${B}[-K storepass] ${c}<-a keyAlias> ${B}[-A keypass] [-c keyalg] [-V validity] [-s keysize]"${END}
  echo2 "${C}${FUNCNAME} ${B}[-n CN] [-O ORG] [-U OU] [-L LOC] [-S ST] [-C CO]"${END}
  echo2 "${n}${FUNCNAME}  ${B}-n  CN*=keyAlias=listenUrl"${END}
  echo2 "${n}${FUNCNAME}  ${B}-O ORG*=${defaultORG}"${END}
  echo2 "${n}${FUNCNAME}  ${B}-U  OU*=project name, depending on the pwd u're running this function"${END}
  echo2 "${n}${FUNCNAME}  ${B}-L LOC*=${defaultLOC}"${END}
  echo2 "${n}${FUNCNAME}  ${B}-S  ST*=${defaultST}"${END}
  echo2 "${n}${FUNCNAME}  ${B}-C  CO*=${defaultCO}"${END}
  return 99
fi

# getopts:
while getopts :dvk:K:a:A:n:V:l:s:O:U:L:S:C: _OPT 2>/dev/null
do
{
  case ${_OPT} in
    d) local Debug=true; local Verbose=true ;;
    v) local Verbose=true ;;
    k) eval keystore="${OPTARG}" ;;
    K) storepass="${OPTARG}" ;;
    a) keyAlias="${OPTARG}" ;;
    A) keypass="${OPTARG}" ;;
    n) CN="${OPTARG}" ;;
    c) keyalg="${OPTARG}" ;;
    V) validity="${OPTARG}" ;;
    s) keysize="${OPTARG}" ;;
    O) ORG="${OPTARG}" ;;
    U) OU="${OPTARG}" ;;
    L) LOC="${OPTARG}" ;;
    S) ST="${OPTARG}" ;;
    C) CO="${OPTARG}" ;;
    *) _NOARGS="${_NOARGS}${_NOARGS+, }-${OPTARG}" ;;
  esac
}
done
shift $((OPTIND - 1))
unset _OPT OPTARG OPTIND
[ "X${_NOARGS}" != "X" ] && ERROR param "${_NOARGS}"

keypass="${storepass}"
! test "${CN}" && CN=${keyAlias}
if ! test "${OU}"; then
  ! test ${PWD##${instancesRootDir}*} && OU="$(echo ${PWD} | cut -d\/ -f 4)"
fi

########
# VERIF ###########################################################################
########
for variable in \
JAVA_HOME \
instancesRootDir \
defaultDomain \
keystore \
storepass \
keyAlias \
keypass \
keyalg \
validity \
keysize \
ORG \
OU \
LOC \
ST \
CO \
CN ;
do
  ! exitOnEmptyVariables $variable && ERROR missing $variable 0 && return 4;
done

#1
# openssl genrsa -out www.laram.key 2048
# openssl req -new -key www.laram.key -out www.laram.csr

#1b
openssl req -new -newkey rsa:2048 -nodes -keyout www.laram.fr.key -out www.laram.fr.csr

#2 vérif la CSR
openssl req -noout -text -in www.laram.fr.2014.csr
#2b vérif le cert
openssl x509 -in www.laram.fr.2014.cert -text -noout

######################################## multi domains #################################

cat > www.laram.fr.2014.cnf << EOT
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req

[req_distinguished_name]
countryName = Country Name (2 letter code)
countryName_default             = FR
stateOrProvinceName             = State or Province Name (full name)
stateOrProvinceName_default     = SEINE SAINT DENIS
localityName                    = Locality Name (eg, city)
localityName_default            = MONTREUIL
organizationName                = organization Name
organizationName_default        = APRIA RSA
organizationalUnitName          = Organizational Unit Name (eg, section)
organizationalUnitName_default  = laram
commonName                      = Common Name (www.domain.org)
commonName_default              = www.laram.fr
commonName_max                  = 64
emailAddress                    = Email Address
emailAddress_default            = undisclosed

[v3_req] 
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1   = www.ramgamex.fr
EOT

openssl req -config www.laram.fr.2014.cnf -new -out www.laram.fr.2014.csr -key www.laram.fr.2014.key

}
