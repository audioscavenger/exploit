createSSLSelfCert() {
#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x | x |   |   |   | x |   | APRIA: create self signed SSL CERT/CA                                                              |
if (($# < 2)); then
  echo2 "${C}${FUNCNAME}${c} <-c CN> ${B}[-t <CA|CERT*>] [-u OU] [-d output directory] ${nn[2]}(will produce <CN>.key & <CN>.crt)"
  echo2 "${n}${FUNCNAME} ${nn[1]} ORG=${defaultORG}"
  echo2 "${n}${FUNCNAME} ${nn[1]} LOC=${defaultLOC}"
  echo2 "${n}${FUNCNAME} ${nn[1]} ST=${defaultST}"
  echo2 "${n}${FUNCNAME} ${nn[1]} CO=${defaultCO}"
  return 99
fi
local ORG LOC ST CO OU CN subject outputDir TYPE
ORG="${defaultORG}"
LOC="${defaultLOC}"
ST="${defaultST}"
CO="${defaultCO}"
outputDir=.
TYPE=CERT
defaultPassword=${defaultPassword:-x}

########
# INIT ###########################################################################
########
# getopts:
local _NOARGS _OPT
while getopts :t:c:u:d:xX _OPT 2>/dev/null
do
{
  case ${_OPT} in
    x) local Verbose=true ;;
    X) local Debug=true; local Verbose=true ;;
    t) TYPE="${OPTARG}" ;;
    c) CN="${OPTARG}" ;;
    u) OU="${OPTARG}" ;;
    d) outputDir="${OPTARG}" ;;
    *) _NOARGS="${_NOARGS}${_NOARGS+, }-${OPTARG}" ;;
  esac
}
done
shift $((OPTIND - 1))
unset _OPT OPTARG OPTIND
[ "X${_NOARGS}" != "X" ] && ERROR param "${_NOARGS}"

if ! test "${OU}"; then
  ! test ${PWD##${instancesRootDir}*} && OU="/OU=$(echo ${PWD} | cut -d\/ -f 4)"
fi
! test "${OU}" && echo2 "ERROR: 'OU' n'a pas pu être déterminé automatiquement, relancez la commande avec -u" && return 1

subject="/C=${CO}/ST=${ST}/L=${LOC}/O=${ORG}${OU:+/OU=}${OU}/CN=${CN}"
$Verbose && echo "${c}${outputDir}/${CN}.crt: ${nn[2]}subject=${subject}"
case "$TYPE" in
CERT)
  # https://devcenter.heroku.com/articles/ssl-certificate-self
  # Generate private key
  $Debug && echo2 "${m}openssl genrsa -des3 -passout pass:x -out ${outputDir}/${CN}.pass.key 2048"
  openssl genrsa -des3 -passout pass:"${defaultPassword}" -out ${outputDir}/${CN}.pass.key 2048
  # Generate decrypted key
  $Debug && echo2 "${m}openssl rsa -passin pass:x -in ${outputDir}/${CN}.pass.key -out ${outputDir}/${CN}.key"
  openssl rsa -passin pass:"${defaultPassword}" -in ${outputDir}/${CN}.pass.key -out ${outputDir}/${CN}.key
  # writing RSA key
  $Debug && echo2 "${m}openssl req -new -key ${outputDir}/${CN}.key -out ${outputDir}/${CN}.csr -subj \"${subject}\""
  openssl req -new -key ${outputDir}/${CN}.key -out ${outputDir}/${CN}.csr -subj "${subject}"
  # Generate SSL certificate
  $Debug && echo2 "${m}openssl x509 -req -days 3650 -in ${outputDir}/${CN}.csr -signkey ${outputDir}/${CN}.key -out ${outputDir}/${CN}.crt"
  openssl x509 -req -days 3650 -in ${outputDir}/${CN}.csr -signkey ${outputDir}/${CN}.key -out ${outputDir}/${CN}.crt
  rm -f ${outputDir}/${CN}.csr ${outputDir}/${CN}.pass.key
  ;;
CA)
  # http://www.onlamp.com/2008/03/04/step-by-step-configuring-ssl-under-apache.html
  $Debug && echo2 "${m}openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -subj \"${subject}\" -keyout ${outputDir}/${CN}.key -out ${outputDir}/${CN}.crt${END}"
  openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -subj "${subject}" -keyout ${outputDir}/${CN}.key -out ${outputDir}/${CN}.crt
  ;;
esac


    # To generate a new request and a new key

    # openssl req -new -out REQ.pem -keyout KEY.pem

    # To generate a self signed x509 certificate from a certificate request using a supplied key, and we want to see the text form of the output certificate (which we will put in the file selfSign.pem)

    # openssl req -x509
    # -in REQ.pem -key KEY.pem -out CERT.pem

    # Verify that the signature is correct on a certificate request.

    # openssl req -verify
    # -in REQ.pem

    # Verify that the signature was made using a specified public key

    # openssl req -verify
    # -in REQ.pem -key KEY.pem

    # Print the contents of a certificate request

    # openssl req -text
    # -in REQ.pem

    # To import the CERT in keystore, you just do next :

    # keytool -import
    # -v -trustcacerts -alias tomcat -file

    # CERT.pem


## vi openssl.${OU}.cnf
# openssl genrsa -des3 -out ${outputDir}/${CN}.key 2048
# openssl req -new -key ${outputDir}/${CN}.key -out ${outputDir}/${CN}.csr -config openssl.${OU}.cnf
## openssl req -text -noout -in ${outputDir}/${CN}.csr
# openssl x509 -req -days 3650 -in ${outputDir}/${CN}.csr -signkey ${outputDir}/${CN}.key -out ${outputDir}/${CN}.crt -extensions v3_req -extfile openssl.${OU}.cnf
# openssl pkcs12 -export -in ${outputDir}/${CN}.crt -inkey ${outputDir}/${CN}.key -out  ${outputDir}/${CN}.p12


}
