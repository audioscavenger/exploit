MESURE_DUREE_FIN() {
local h m s H M S H_D_SS H_D_MM H_D_HH H_F_SS H_F_MM H_F_HH DUREE_SS DUREE_MM DUREE_HH
# MESURE_DUREE_FIN()
# export $elapsedLong  : X heures Y minutes / Y minutes Z secondes
# export $elapsedShort : Xh Ym / Ym Zs
# export $elapsedExact : 00:00:00
#--------------------------------------------
HEURE_FIN=$(date +%H:%M:%S)
[ ! -z "$1" ] && [[ $1 == [0-9][0-9]:[0-9][0-9]:[0-9][0-9] ]] && HEURE_FIN=$1 && shift
[ -z "$HEURE_DEBUT" ] && return 0

h="h"
m="m"
s="s"
H=" heures"
M=" minutes"
S=" secondes"

read H_D_HH H_D_MM H_D_SS <<<${HEURE_DEBUT//:/ }
read H_F_HH H_F_MM H_F_SS <<<${HEURE_FIN//:/ }

# using parameter expansion, we remove any leading 0 in integers, if not they would be thought as octal ! especially 08 and 09:
# bash: 08: value too great for base (error token is "08")
# bash: 09: value too great for base (error token is "09")
DUREE_SS=$(( ${H_F_SS#0} - ${H_D_SS#0} ))
DUREE_MM=$(( ${H_F_MM#0} - ${H_D_MM#0} ))
DUREE_HH=$(( ${H_F_HH#0} - ${H_D_HH#0} ))

(( DUREE_SS < 0 )) && DUREE_SS=$(( 60 + DUREE_SS )) && DUREE_MM=$(( DUREE_MM - 1 ))
(( DUREE_MM < 0 )) && DUREE_MM=$(( 60 + DUREE_MM )) && DUREE_HH=$(( DUREE_HH - 1 ))
(( DUREE_HH < 0 )) && DUREE_HH=$(( 24 + DUREE_HH ))

export elapsedExact="$DUREE_HH:$DUREE_MM:$DUREE_SS"
(( DUREE_HH > 0 )) && export elapsedShort="$DUREE_HH$h $DUREE_MM$m" && export elapsedLong="$DUREE_HH$H $DUREE_MM$M"
(( DUREE_HH == 0 )) && export elapsedShort="$DUREE_MM$m $DUREE_SS$s" && export elapsedLong="$DUREE_MM$M $DUREE_SS$S"

}
