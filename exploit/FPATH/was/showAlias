showAlias() {
#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x |   |   |   |   | x |   | shows local alias and useful command usage from was                                                |
echo ${W}${SMUL}"Liste des alias utiles        ${END}: (${c}showAlias${w})"
alias | grep cd_ | grep -v '?' | awk -F= '{"eval echo "$NF| getline alias;printf "{C}%13s {K}= {c}%s\n",$1,alias}' | tr -d \' | grep -v "cd$" | ${COLORIZE} ${LOWS} ${HIGHS}

[ -z "${wasVersion}" ] && was_setEnv

echo
echo ${W}${SMUL}"Liste des commandes possibles ${END}: (${c}was [00 | off | reload]${w})"
[ -n "${wasRoot85}" ] && echo "${G}was 85 ${w}(switch to was85)"
[ -n "${wasRoot8}" ] && echo "${G}was 8 ${w}(switch to was8)"
[ -n "${wasRoot7}" ] && echo "${G}was 7 ${w}(switch to was7)"
[ -n "${wasRoot61}" ] && echo "${G}was 61 ${w}(switch to was61)"
[ -n "${wasRoot6}" ] && echo "${G}was 6 ${w}(switch to was6)"
[ -n "${wasRoot5}" ] && echo "${G}was 5 ${w}(switch to was5)"

echo -e "
${C}${SMUL}local             ${c}${SMUL}remote            ${g}${SMUL}multiple${END}
${C}showWas
${C}wasps
${C}                  ${c}                  ${g}showApp
${C}showEnv
${C}showLocalServers  ${c}showRemoteServers ${g}showServers
${C}showLocalNodes    ${c}showRemoteNodes   ${g}showNodes
${g}startManager      ${w}[-nowait -trace]
${r}stopManager       ${w}[-nowait -trace]
${g}startNode         ${w}[-nowait -trace]
${r}stopNode          ${w}[-nowait -trace]
${g}startServer       ${c}[-f] <WAS_SERVER | dmgr>
${r}stopServer        ${c}     <WAS_SERVER | dmgr>
${y}was_install       ${c}[-fprid] <UPD|WAS|IHS|PLG> [/was/Product/Location]
${y}was_patch         ${c}<WAS|SDK> ${w}| ${c}<IHS|PLG [IHSname|all*]> ${g8}(WAS is always patched with WASSDK)
${y}was_createProfile ${c}<-h <dmgrHost> <-P dmgrAdminPassword> [-option [value]]
${y}waslog            ${c}[-fds] <filePath | ENV | WAS_SERVER>
${y}wsadmin           ${c}[-f file.py] [-c \"wsadmin commands...\"]
${y}was_appInstall    ${c}<-a appName> <-e earFilePath> <[-w server1 ..]|[-c cluster1 ..]> [-v virtualHostName] [-h httpServerName1 ..] [-s sharedLibraryName] [-d earDestination]
${y}was_appUpdate     ${c}<appName> <earFilePath>
${END}"
}
