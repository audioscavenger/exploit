wsadmin_cmd() {
#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x | x |   |   | x | x | x | local or remote exec via ssh of Websphere commands and jython commands via wsadmin                 |
local commandList='listServersByNodeName getSoapInfos getIpcInfos getWsadminInfos getMixedDetailsOnServers getEacbFromCell getSshInfection getBashInfection getAppServerTuningDict showAppServerTuningDict was_checkVersions'
local commandListWithParam='"was_install [-opt] <XXX>" "was_patch [-opt] <XXX>" "was_checkVersion" "was_checkVersions"'
local THINCLIENT _cmd _escaped_cmd _cmd_options _wasVersion remoteServer remoteUser properties2Grep props2Grep wsadmin_cmd remoteTTY JYTHON_CMD
local TMP LOG LOGG Verbose
JYTHON_CMD=false
THINCLIENT=false
Verbose=false
remoteTTY=T
ssh=${ssh:-"ssh -A -o PreferredAuthentications=publickey -o StrictHostKeyChecking=no"}
wasRemoteProfile=${wasRemoteProfile:-"{ bash --rcfile ${DIREXPLOIT}/profile.sh >/dev/null 2>&1; was ${_wasVersion}; }"}
remoteProfile=${remoteProfile:-". ${DIREXPLOIT}/profile.sh >/dev/null 2>&1"}

if (($# < 2)); then
  echo2 "${C}${FUNCNAME}${c}  [-vdt] <command> <wasVersion> [remoteServer] ${K}(show commands bellow)${END}"
  echo2 -e "NO_PARAM  : ${K}\c"
  echo2 ${commandList} | tr ' ' '\n' && echo2 ${END}
  echo2 -e "WITH_PARAM: ${K}\c"
  echo2 ${commandListWithParam} | tr ' ' '\n' && echo2 ${END}
  return 99
fi

while [[ "x$1" == x-? ]]; do
  case "x$1" in
  x-v) Verbose=true; _cmd_options="${_cmd_options} -v" ;;
  x-d) local Debug=true; Verbose=true; _cmd_options="${_cmd_options} -d" ;;
  x-t) THINCLIENT=true; _cmd_options="${_cmd_options} -t" ;;
  esac
  shift
done

_cmd="$1"
_wasVersion=$2
remoteServer=${3:-$HOSTNAME}
# remoteUser (read "default" remoteUser) is set within the ENTITY profile
remoteUser=${remoteUser:-${LOGNAME}}

! ((_wasVersion + 1)) 2>/dev/null && ERROR param "\$2 doit etre un chiffre" 0 && return 1

setDate
TMP=/tmp/${FUNCNAME}.${PPID}.$$.$DATE.${remoteServer}.tmp
LOG=/tmp/${FUNCNAME}.${PPID}.$$.$DATE.${remoteServer}.log
LOGG="tee -a ${LOG}"

properties2Grep="connectionType|securityEnabled|authenticationTarget|loginUserid|loginPassword|loginSource|requestTimeout"
props2Grep="connectionType|port|host|ipchost|defaultLang|echoparams"
_escaped_cmd=$(printf '"%q"' "${_cmd}")

#++++++++++++++++++++++++++++++++++++++ remote command via ssh
if [ "${remoteServer}" != "${HOSTNAME}" ]; then
  $Debug && echo2 "${HIGH}${m}_cmd=${_cmd}"
  $Debug && echo2 "${HIGH}${m}wasVersion=${_wasVersion}${END}"
  # some remote commands such those calling "awk -f ${patterner}" REQUIRE a pseudo TTY (/dev/tty):
  case "${_cmd}" in
  was_install*) remoteTTY=t ; Verbose=true ;;
  was_patch*)   remoteTTY=t ; Verbose=true ;;
  esac

  if ((_wasVersion > 4)); then
    $Verbose && $Echo ${C} DATE "wsadmin_cmd ${_cmd_options} ${remoteUser}@${remoteServer}" "${_escaped_cmd} ${_wasVersion}"
    if $Debug; then
      # cannot use classic remote ssh coz it would execute user's shell which is KSH and incompatible with our way of life
      # command ${ssh} -qx -l ${remoteUser} -${remoteTTY} ${remoteServer} "${wasRemoteProfile} ; eval wsadmin_cmd \\\"${_escaped_cmd}\\\" ${_wasVersion} 2>&1" 2>&1 |${LOGG}
      echo "${remoteProfile}; was ${_wasVersion} 2>&1; eval wsadmin_cmd ${_cmd_options} \\\"${_escaped_cmd}\\\" ${_wasVersion} 2>&1" | command ${ssh} -qx -l ${remoteUser} -${remoteTTY} ${remoteServer} env STY=$STY env TTY_WIDTH=$TTY_WIDTH /bin/bash 2>&1 |${LOGG}
    else
      # command ${ssh} -qx -l ${remoteUser} -${remoteTTY} ${remoteServer} "${wasRemoteProfile} ; eval wsadmin_cmd \\\"${_escaped_cmd}\\\" ${_wasVersion} 2>&1" >${LOG} 2>&1
      echo "${remoteProfile}; was ${_wasVersion} 2>&1; eval wsadmin_cmd ${_cmd_options} \\\"${_escaped_cmd}\\\" ${_wasVersion} 2>&1" | command ${ssh} -qx -l ${remoteUser} -${remoteTTY} ${remoteServer} env STY=$STY env TTY_WIDTH=$TTY_WIDTH /bin/bash >${LOG} 2>&1
    fi
  else
    echo "${remoteProfile}; eval wsadmin_cmd ${_cmd_options} \"${_escaped_cmd}\" ${_wasVersion} 2>&1" | command ${ssh} -qx -l ${remoteUser} -${remoteTTY} ${remoteServer} env STY=$STY env TTY_WIDTH=$TTY_WIDTH /bin/bash >${LOG} 2>&1
  fi
  # INFO: IMPOSSIBLE to get the real CR from the remote command via parallelized piped ssh so we trick by detecting know words in the LOG:
  egrep -q "ERROR|FAILED" ${LOG} && CR=1 || CR=0

  # some remote commands require a file to be downloaded afterward:
  case "${_cmd}" in
  getMixedDetailsOnServers)
    command ${scp} -vrp ${remoteUser}@${remoteServer}:/tmp/getMixedDetailsOnServers.*.${DAY}.csv /tmp/ >>${LOG} 2>/dev/null
    (($? == 0)) && ls /tmp/getMixedDetailsOnServers.*.${remoteServer}.${DAY}.csv >/dev/null 2>&1 && $Echo ${c} DATE "scp ${remoteUser}@${remoteServer}" "$(ls -rt /tmp/getMixedDetailsOnServers.*.${remoteServer}.*.${DAY}.csv|tail -1)" OK || CR=2
  ;;
  getEacbFromCell)
    command ${scp} -vrp ${remoteUser}@${remoteServer}:/tmp/getEacbFromCell.*.${DAY}.csv /tmp/ >>${LOG} 2>/dev/null
    (($? == 0)) && ls /tmp/getEacbFromCell.*.${remoteServer}.*.${DAY}.csv >/dev/null 2>&1 && $Echo ${c} DATE "scp ${remoteUser}@${remoteServer}" "$(ls -rt /tmp/getEacbFromCell.*.${remoteServer}.*.${DAY}.csv|tail -1)" OK || CR=2
  ;;
  *)
    $Debug || cat ${LOG}
  ;;
  esac
  
  if ((CR != 0)); then
    $Verbose && $Echo ${R} DATE "wsadmin_cmd ${remoteUser}@${remoteServer}" "LOG=${LOG}" $CR
  else
    $Verbose && $Echo ${C} DATE "wsadmin_cmd ${remoteUser}@${remoteServer}" "LOG=${LOG}" $CR
  fi
  $Verbose && $Echo ${C} DATE "${HOSTNAME} -> ${remoteServer}" "remote ${_cmd}" $CR
  
  
  return $CR
fi
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#-------------------------------------------------------------
# local command execution or remotely commanded execution
[ -z "${wasVersion}" ] && ((_wasVersion > 4)) && was ${_wasVersion}
if [ "${remoteServer}" == "${HOSTNAME}" ] ; then
  # we are TTY, executing locally, OR we are executing remotely without TTY, whatever we must execute the command
  # [ -z "${wasVersion}" ] && echo2 "wsadmin_cmd: ERROR setting wasVersion ${_wasVersion}" && return 1
  $THINCLIENT && wsadmin_cmd=${thinClientIPC} || wsadmin_cmd=${wsadmin}
else
  # we are obviously still on the remoteServer, we have to send the command remotely
  # [ -z "${wasVersion}" ] && echo2 "wsadmin_cmd: ERROR setting wasVersion from ${remoteServer}" && return 1
  color=${HIGH}
  wsadmin_cmd=${thinClientSOAP}
fi
$Debug && echo2 "${color}${m}FPATH=$FPATH${END}"
$Debug && echo2 "${color}${m}_cmd=${_cmd}${END}"
$Debug && echo2 "${color}${m}wasVersion=${_wasVersion}${END}"

case "${_cmd}" in
was_install*)
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "${_cmd}"
  eval eval ${_cmd} 2>&1 |${LOGG}
;;
was_patch*)
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "${_cmd}"
  eval eval ${_cmd} 2>&1 |${LOGG}
;;
was_checkVersions*)
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "${_cmd}"
  eval eval ${_cmd} 2>&1 |${LOGG}
;;
was_checkVersion*)
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "${_cmd}"
  eval eval ${_cmd} 2>&1 |${LOGG}
;;
getIpcInfos)
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "${_cmd}"
  egrep -v "^#|^$" ${wasDmgrDir}/properties/ipc.client.props | egrep ${properties2Grep} | sed -e "s/=.*$/${B}&${END}/g" 2>&1 |${LOGG}
;;
getSoapInfos)
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "${_cmd}"
  egrep -v "^#|^$" ${wasDmgrDir}/properties/soap.client.props | egrep ${properties2Grep} | sed -e "s/=.*$/${B}&${END}/g" 2>&1 |${LOGG}
;;
getSshInfection)
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "${_cmd}"
  if [ "${UNAME}" == "AIX" ]; then
    echo "$HOSTNAME: System ssh clean" |${LOGG}
  else
    ssh -G 2>&1 | grep -e illegal -e unknown > /dev/null && echo "$HOSTNAME: System ssh clean" || echo "$HOSTNAME: System ssh infected" |${LOGG}
  fi
;;
getBashInfection)
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "${_cmd}"
  env COLOR='() { :;}; echo -ne vulnerable:' bash -c "echo $HOSTNAME" |${LOGG}
;;
getWsadminInfos)
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "${_cmd}"
  egrep -v "^#|^$" ${wasDmgrDir}/properties/wsadmin.properties | egrep ${props2Grep} | sed -e "s/=.*$/${B}&${END}/g" 2>&1 |${LOGG}
;;
getMixedDetailsOnServers)
  _cmd="writeTo('/tmp/getMixedDetailsOnServers.'+sVER+'.'+currentHostName+'.'+cellName+'.${DAY}.csv', libApp.getMixedDetailsOnServers())"
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "\${wsadmin_cmd} -c \"${_cmd}\""
  $Debug && echo2 "eval ${wsadmin_cmd} -c \"${_cmd}\""
  eval ${wsadmin_cmd} -c "\"writeTo('/tmp/getMixedDetailsOnServers.'+sVER+'.'+currentHostName+'.'+cellName+'.${DAY}.csv', libApp.getMixedDetailsOnServers())\"" 2>&1 |${LOGG}
  ls -lrt /tmp/getMixedDetailsOnServers* | tail -1 |${LOGG}
;;
getEacbFromCell)
  _cmd="writeTo('/tmp/getEacbFromCell.'+sVER+'.'+currentHostName+'.'+cellName+'.${DAY}.csv', getEacbFromCell(False, False, Verbose, cellName, srcLocation='NEY', dstLocation='NEY', srcIP_NAT='', dstIP_NAT='', Transport='TCP'))"
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "\${wsadmin_cmd} -c \"${_cmd}\""
  $Debug && echo2 "eval ${wsadmin_cmd} -c \"${_cmd}\""
  eval ${wsadmin_cmd} -c "\"\"" 2>&1 |${LOGG}
  ls -lrt /tmp/getEacbFromCell* | tail -1 |${LOGG}
;;
getAppServerTuningDict)
  _cmd="writeTo('/tmp/getAppServerTuningDict.'+sVER+'.'+currentHostName+'.'+cellName+'.${DAY}.csv', libTuning.getAppServerTuningDict(CSV=True))"
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "\${wsadmin_cmd} -c \"${_cmd}\""
  $Debug && echo2 "eval ${wsadmin_cmd} -c \"${_cmd}\""
  eval ${wsadmin_cmd} -c "\"writeTo('/tmp/getAppServerTuningDict.'+sVER+'.'+currentHostName+'.'+cellName+'.${DAY}.csv', libTuning.getAppServerTuningDict(CSV=True))\"" 2>&1 |${LOGG}
  ls -lrt /tmp/getAppServerTuningDict* | tail -1 |${LOGG}
;;
showAppServerTuningDict)
  _cmd="libTuning.showAppServerTuningDict()"
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "\${wsadmin_cmd} -c \"${_cmd}\""
  $TTY && printf ${G} || printf ${g}
  $Debug && echo2 "${m}eval ${wsadmin_cmd} -c \"${_cmd}\"${END}"
  eval ${wsadmin_cmd} -c "\"${_cmd}\"" 2>&1 |${LOGG}
  ls -lrt /tmp/getMixedDetailsOnServers* | tail -1 |${LOGG}
;;
listServersByNodeName)
  _cmd="libConfig.listServersByNodeName()"
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "\${wsadmin_cmd} -c \"${_cmd}\""
  $TTY && printf ${G} || printf ${g}
  $Debug && echo2 "${m}eval ${wsadmin_cmd} -c \"${_cmd}\"${END}"
  eval ${wsadmin_cmd} -c "\"${_cmd}\"" 2>&1 |${LOGG}
  ($TTY && $Verbose) && $Echo ${G} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME} ${wasVersion}" "local ${_cmd}" OK || $Echo ${g} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME} ${wasVersion}" "remote ${_cmd}" OK
;;
*)
  JYTHON_CMD=true
  $Verbose && $Echo ${color}${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "\${wsadmin_cmd} -c \"${_cmd}\""
  $Debug && eval ${wsadmin_cmd} -c "${_cmd}" || eval ${wsadmin_cmd} -c "${_cmd}" | /bin/egrep -v "WASX7209I|WASX7031I"
;;
esac
CR=$?

$Verbose && ($JYTHON_CMD && $Echo ${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "\${wsadmin_cmd} -c ${_cmd}" OK || $Echo ${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "${_cmd}" OK)
# rm -f ${TMP}
#-------------------------------------------------------------
return $CR
}
