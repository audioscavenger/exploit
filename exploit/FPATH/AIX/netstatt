netstatt() {
#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |AIX   | x |   |   | x | x |   |   | mimic lsof to get LISTEN* CLOSED CLOSE_WAIT TIME_WAIT ESTABLISHED FIN_WAIT_2 processes and PID     |
# https://www.ibm.com/developerworks/community/blogs/brian/entry/determine_which_processes_have_listening_ports_on_aix15?lang=en

local HELP STATUS STATUS_DEFAULT
HELP="${C}${FUNCNAME}${c} [-hlcwtefaFxX] ${g8}(lcwtef = LISTEN* CLOSED CLOSE_WAIT TIME_WAIT ESTABLISHED FIN_WAIT_2; a = ALL; F = SHOWPCB)${END}"
STATUS_DEFAULT="LISTEN$"
SHOWPCB=false

# getopts:
local _OPT _NOARGS OPTARG OPTIND
while getopts :halcwtefFxX _OPT 2>/dev/null
do
{
  case ${_OPT} in
    h) echo2 "${HELP}" && return ;;
    a) STATUS="LISTEN$|CLOSED$|CLOSE_WAIT$|TIME_WAIT$|ESTABLISHED$|FIN_WAIT_2$" ;;
    l) STATUS="${STATUS}${STATUS:+|}LISTEN$" ;;
    c) STATUS="${STATUS}${STATUS:+|}CLOSED$" ;;
    w) STATUS="${STATUS}${STATUS:+|}CLOSE_WAIT$" ;;
    t) STATUS="${STATUS}${STATUS:+|}TIME_WAIT$" ;;
    e) STATUS="${STATUS}${STATUS:+|}ESTABLISHED$" ;;
    f) STATUS="${STATUS}${STATUS:+|}FIN_WAIT_2$" ;;
    F) SHOWPCB=true ;;
    x) local Verbose=true ;;
    X) local Debug=true; local Verbose=true ;;
    *) _NOARGS="${_NOARGS}${_NOARGS+, }-${OPTARG}" ;;
  esac
}
done
shift $((OPTIND - 1))
unset _OPT OPTARG OPTIND
[ "X${_NOARGS}" != "X" ] && ERROR param "${_NOARGS}"

STATUS="${STATUS:-${STATUS_DEFAULT}}"

# INFO: accessing exported functions with parallel is ONLY possible with SHELL=.../bash
# http://www.gnu.org/software/parallel/parallel_tutorial.html
SHELL=/bin/bash

printf "%4s %15s:%-5s %-16s %-"$($SHOWPCB && echo 16)"s %s\n" "tcp" "IP" "Port" "PID" "$($SHOWPCB && echo pcb)" "Process (${STATUS})"
netstat -Aan |\
egrep "${STATUS}" |\
awk '{print $1,$2,$5}' |\
parallel --no-notice --gnu --round-robin --jobs ${parallelJobs} --colsep "[[:blank:]]" 'getPidFromPTP {1} {2} {3}'

# while read pcb tcp port; do
  # IP="${port%\.*}"
  # PORT="${port##*\.}"
  # Out=$(rmsock $pcb tcpcb 2>/dev/null)
  # if (echo $Out | grep -q "Kernel Extension"); then
    # $Debug && echo2 "lsofip -p -f \"${IP}\" \"${PORT}\""
    # read Pid Process <<<$(lsofip -p -f "${IP}" "${PORT}" 2>/dev/null)
    # printf "${g8}%4s %15s:%-5s %-16s %"$($SHOWPCB && echo 16)"s %s${END}\n" "$tcp" "${IP}" "${PORT}" "${Pid:-0}" "$($SHOWPCB && echo $pcb)" "Kernel Extension${Process:+: }$Process"
  # else
    # Pid=$(echo "$Out" | sed -n 's/.*pro[c]*ess \([0-9][0-9]*\) .*/\1/p')
    # if [ -n "$Pid" ]; then
      # Proc=$(ps -p $Pid | tail -n 1 | awk '{print $4}')
      # printf "%4s %15s:%-5s %-16s %"$($SHOWPCB && echo 16)"s %s\n" "$tcp" "${IP}" "${PORT}" "${Pid:-0}" "$($SHOWPCB && echo $pcb)" "$Proc"
    # else
      # printf "${r}%4s %15s:%-5s %-16s %16s %s${END}\n" "$tcp" "${IP}" "${PORT}" "${Pid:-0}" "$pcb" "$Out"
    # fi
  # fi
# done
}