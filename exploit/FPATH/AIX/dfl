dfl() {
#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |AIX   | x |   |   | x |   |   |   | list AIX FS and PV with sizes and colors                                                           |
### /tmp/vgg.tmp
# {Ry} 86 {END}{y} rootvg {K} lvdump0 sysdump 8 8 1      open {K}syncd {K} N/A
# {Ry} 86 {END}{y} rootvg {w} lv_apps jfs2 8 8 1      open {w}syncd {w} /apps
### /tmp/dff.tmp
# {r} 99 /apps/webservers/ivision/IVI7WDX0
### dfl
# {Ry} 86 {END}{y} rootvg {w} lv_apps jfs2 8 8 1      open/{w}syncd {w} 29% /apps
### dfl + awk + COLORIZE
# %Used VGname  LV_NAME                    TYPE     LPs     PPs  PVs      LV_STATE Use% MOUNT_POINT
#   87  rootvg  lv_apps                    jfs2      26      52    2    open/syncd   9% /apps
#^[[0;33m^[[7m  86 ^[[0m^[[0;33m rootvg     ^[[0;37mhd4                        jfs2      17      17    1       open/^[[0;37msyncd^[[0;37m  50% /
##
FS=${1:-" "}
# INFO case : quoted * is NOT working !
case "${FS}" in
" ")	FS="/" ;;
"/")	FS="/$" ;;
".")	FS=$(df -P $FS|tail -1|awk '{print $NF}') ;;
*)	[[ ${#FS} -gt 1 && ${FS%${FS#?}} == "/" ]] && FS=$(df -P $FS|tail -1|awk '{print $NF}') ;;
esac

echo "${n}${RW}%Used${END}${W}${SMUL} VGname     LV_NAME                    TYPE size   LPs   PPs  free PVs         LV_STATE Use% MOUNT_POINT${END}"

df | egrep -vw "/proc|Mounted" | awk '{gsub("%","",$4);if ($4<86) {COLOR="{g}"};if ($4>85 && $4<96) {COLOR="{y}"};if ($4>95 && $4<100) {COLOR="{r}"};if ($4==100) {COLOR="{RR}"};print COLOR,$4,$7}' | sort -b -k 3 >/tmp/dff.tmp

for VGname in $(lsvg)
do
  # pipe | read works only for KSH
  # lsvg $VGname | egrep "TOTAL PPs:|FREE PPs:|PP SIZE:" | awk '{ORS=" ";print $6}' | read PP_SIZE TOTAL_PPs FREE_PPs
  # fucking bash alternative to 'pipe | read': read -r PP_SIZE TOTAL_PPs FREE_PPs <<<$(lsvg $VGname | egrep "TOTAL PPs:|FREE PPs:|PP SIZE:" | awk '{ORS=" ";print $6}')
  PP_SIZE=$(lsvg $VGname | grep "PP SIZE:" | awk '{ORS=" ";print $6}')
  FREE_PPs=$(lsvg $VGname | grep "FREE PPs:" | awk '{ORS=" ";print $6}')
  TOTAL_PPs=$(lsvg $VGname | grep "TOTAL PPs:" | awk '{ORS=" ";print $6}')
  VG_USED_Pct=$((100 * (TOTAL_PPs - FREE_PPs) / TOTAL_PPs))
  lsvg -l $VGname | awk -v VGname=$VGname -v VG_USED_Pct=$VG_USED_Pct -v freePP=$FREE_PPs -v size=$PP_SIZE 'NR>2 {
    colorVG="{END}";colorLine="{w}"
    LV_NAME=$1;TYPE=$2;LPs=$3;PPs=$4;PVs=$5;MOUNT_POINT=$7
    if (VG_USED_Pct < 1) {colorUsed="{RG}";colorVG="{G}"}
    if (VG_USED_Pct > 0 && VG_USED_Pct < 80) {colorUsed="{Rg}";colorVG="{g}"}
    if (VG_USED_Pct > 79 && VG_USED_Pct < 90) {colorUsed="{Ry}";colorVG="{y}"}
    if (VG_USED_Pct > 89 && VG_USED_Pct < 100) {colorUsed="{Rr}";colorVG="{r}"}
    if (VG_USED_Pct > 99) {colorUsed="{RR}";colorVG="{RR}"}
    if ($7 == "N/A") {colorLine="{K}"}
    split($6,LV_STATE,"/")
    if (LV_STATE[1] == "closed") {LV_STATE[1]="    {R}"LV_STATE[1]} else {LV_STATE[1]="     "LV_STATE[1]}
    if (LV_STATE[2] == "stale") {gsub("stale","{R}stale",LV_STATE[2])}
    print "{n}"colorUsed,VG_USED_Pct,"{END}"colorVG,VGname,colorLine,LV_NAME,TYPE,size,LPs,PPs,freePP,PVs,LV_STATE[1],LV_STATE[2],colorLine,MOUNT_POINT
    }'
done | sort -b -k 13 >/tmp/vgg.tmp

# INFO: un join avec awk ! En effet join pose certains problèmes lorsques le nombre de colonnes n'est pas le même, et puis c'est difficile à maintenir
awk '
NR==FNR{arr[$NF]=$0;next}
$NF in arr && $0=arr[$3] FS $1 FS $2
' /tmp/vgg.tmp /tmp/dff.tmp |\
awk '{
  colorUsed=$1;VG_USED_Pct=$2;colorVG=$3;VGname=$4;colorLine=$5;LV_NAME=$6;TYPE=$7;size=$8;LPs=$9;PPs=$10;free=$11;PVs=$12;LV_STATE1=$13;LV_STATE2=$14;colorLine=$15;MOUNT_POINT=$16;colorFS=$17;FS_FREE_Pct=$NF
  if (FS_FREE_Pct == "100" && VG_USED_Pct == "100") {colorLine=colorFS}
  if (colorFS == "{g}") {colorFS=""}
  printf "%s %3s %s %-10s %s%-20s %10s %4s %5s %5s %5s %3s %10s{END}/%s%s%s%s %3s%% %s{END}\n",colorUsed,VG_USED_Pct,colorVG,VGname,colorLine,LV_NAME,TYPE,size,LPs,PPs,free,PVs,LV_STATE1,colorLine,LV_STATE2,colorLine,colorFS,FS_FREE_Pct,MOUNT_POINT
  }' |\
grep ${FS} |\
${COLORIZE} ${LOWS} ${HIGHS} ${REVLOWS} ${REVHIGHS}
echo "${END}"
#join -a1 -1 11 -2 2 -o 1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,1.10,2.1,0 - $(df | egrep -vw "/proc|Mounted" | awk '{gsub("%","",$4);if ($4>85 && $4<96) {$4="{y}"$4};if ($4>95 && $4<100) {$4="{r}"$4};if ($4==100) {$4="{RR}"$4};print $4,$7}' | sort -b -k 2)
}
