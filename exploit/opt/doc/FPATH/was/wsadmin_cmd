wsadmin_cmd() {
local commandList='listServersByNodeName getSoapInfos getIpcInfos getWsadminInfos getMixedDetailsOnServers getEacbFromCell getSshInfection getAppServerTuningDict showAppServerTuningDict was_checkVersions was_install was_patch'
local commandListWithParam='"was_install [-opt] <XXX>" "was_patch [-opt] <XXX>"'
local THINCLIENT _cmd _cmd_options _wasVersion remoteServer remoteUser properties2Grep props2Grep wsadmin_cmd remoteTTY
local TMP LOG LOGG Verbose
THINCLIENT=false
Verbose=false
remoteTTY=T

if (($# < 2)); then
  echo2 "${C}${FUNCNAME} ${c} [-vdt] <command> <wasVersion> [remoteServer] ${N}(show commands bellow)${END}"
  echo2 -e "NO_PARAM  : ${N}\c"
  echo2 ${commandList} | tr ' ' '\n' && echo2 ${END}
  echo2 -e "WITH_PARAM: ${N}\c"
  echo2 ${commandListWithParam} | tr ' ' '\n' && echo2 ${END}
  return 99
fi

while [[ "x$1" == x-? ]]; do
  case "x$1" in
  x-v) Verbose=true; _cmd_options="${_cmd_options} -v" ;;
  x-d) local Debug=true; _cmd_options="${_cmd_options} -d" ;;
  x-t) THINCLIENT=true; _cmd_options="${_cmd_options} -t" ;;
  esac
  shift
done

_cmd="$1"
_wasVersion=$2
remoteServer=${3:-$HOSTNAME}
# remoteUser (read "default" remoteUser) is set within the ENTITY profile
remoteUser=${remoteUser:-${LOGNAME}}

$Debug && echo -e "${RM}_cmd={$_cmd}\nwasVersion=${_wasVersion}${END}"
setDate
TMP=/tmp/wsadmin_cmd.${PPID}.$$.$DATE.${remoteServer}.tmp
LOG=/tmp/wsadmin_cmd.${PPID}.$$.$DATE.${remoteServer}.log
LOGG="tee -a ${LOG}"

properties2Grep="connectionType|securityEnabled|authenticationTarget|loginUserid|loginPassword|loginSource|requestTimeout"
props2Grep="connectionType|port|host|ipchost|defaultLang|echoparams"
# wasRemoteProfile="{ . ${DIREXPLOIT}/profile.apria.sh >/dev/null 2>&1; was ${_wasVersion}; }"

#++++++++++++++++++++++++++++++++++++++ remote command via ssh
if [ "${remoteServer}" != "${HOSTNAME}" ]; then
  # some remote commands such those calling "awk -f ${patterner}" REQUIRE a pseudo TTY (/dev/tty):
  case "${_cmd}" in
  was_install*) remoteTTY=t ;;
  was_patch*)   remoteTTY=t ;;
  esac

  if ((_wasVersion != 0)); then
    $Verbose && $Echo ${C} DATE "wsadmin_cmd ${_cmd_options} ${remoteUser}@${remoteServer}" "${_cmd} ${_wasVersion}"
    if $Debug; then
      # command ${ssh} -qx -l ${remoteUser} -tt ${remoteServer} "${wasRemoteProfile} ; eval wsadmin_cmd \\\"${_cmd}\\\" ${_wasVersion} 2>&1" 2>&1 |${LOGG}
      echo "${remoteProfile}; was ${_wasVersion} 2>&1; eval wsadmin_cmd ${_cmd_options} \\\"${_cmd}\\\" ${_wasVersion} 2>&1" | command ${ssh} -qx -l ${remoteUser} -${remoteTTY} ${remoteServer} env STY=$STY env TTY_WIDTH=$TTY_WIDTH /bin/bash 2>&1 |${LOGG}
      CR=${PIPESTATUS[0]}
    else
      # command ${ssh} -qx -l ${remoteUser} -tt ${remoteServer} "${wasRemoteProfile} ; eval wsadmin_cmd \\\"${_cmd}\\\" ${_wasVersion} 2>&1" >${LOG} 2>&1
      echo "${remoteProfile}; was ${_wasVersion} 2>&1; eval wsadmin_cmd ${_cmd_options} \\\"${_cmd}\\\" ${_wasVersion} 2>&1" | command ${ssh} -qx -l ${remoteUser} -${remoteTTY} ${remoteServer} env STY=$STY env TTY_WIDTH=$TTY_WIDTH /bin/bash >${LOG} 2>&1
      CR=$?
    fi
  else
    echo "${remoteProfile}; eval wsadmin_cmd ${_cmd_options} \\\"${_cmd}\\\" ${_wasVersion} 2>&1" | command ${ssh} -qx -l ${remoteUser} -${remoteTTY} ${remoteServer} env STY=$STY env TTY_WIDTH=$TTY_WIDTH /bin/bash >${LOG} 2>&1
    CR=$?
  fi

  # some remote commands require a file to be downloaded back:
  case "${_cmd}" in
  getMixedDetailsOnServers)
    command ${scp} -vrp ${remoteUser}@${remoteServer}:/tmp/getMixedDetailsOnServers.*.${DAY}.csv /tmp/ >>${LOG} 2>/dev/null
    (($? == 0)) && ls /tmp/getMixedDetailsOnServers.*.${remoteServer}.${DAY}.csv >/dev/null 2>&1 && $Echo ${c} DATE "scp ${remoteUser}@${remoteServer}" "$(ls -rt /tmp/getMixedDetailsOnServers.*.${remoteServer}.*.${DAY}.csv|tail -1)" OK || CR=2
  ;;
  getEacbFromCell)
    command ${scp} -vrp ${remoteUser}@${remoteServer}:/tmp/getEacbFromCell.*.${DAY}.csv /tmp/ >>${LOG} 2>/dev/null
    (($? == 0)) && ls /tmp/getEacbFromCell.*.${remoteServer}.*.${DAY}.csv >/dev/null 2>&1 && $Echo ${c} DATE "scp ${remoteUser}@${remoteServer}" "$(ls -rt /tmp/getEacbFromCell.*.${remoteServer}.*.${DAY}.csv|tail -1)" OK || CR=2
  ;;
  *)
    cat ${LOG}
  ;;
  esac
  
  if ((CR != 0)); then
    cat ${LOG}
    $Verbose && $Echo ${R} DATE "wsadmin_cmd ${remoteUser}@${remoteServer}" "LOG=${LOG}" ${CR}
  else
    $Verbose && $Echo ${C} DATE "wsadmin_cmd ${remoteUser}@${remoteServer}" "LOG=${LOG}" OK
  fi
  $Verbose && $Echo ${C} DATE "wsadmin_cmd ${HOSTNAME} -> ${remoteServer}" "remote ${_cmd}" $CR
  return $CR
fi
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#-------------------------------------------------------------
# local command execution or remotely commanded execution
if [ "${remoteServer}" == "${HOSTNAME}" ] ; then
  [ -z "${wasVersion}" ] && ((_wasVersion > 0)) && was ${_wasVersion}
  # [ -z "${wasVersion}" ] && echo2 "wsadmin_cmd: ERROR setting wasVersion ${_wasVersion}" && return 1
  $THINCLIENT && wsadmin_cmd=${thinClientIPC} || wsadmin_cmd=${wsadmin}
else
  [ -z "${wasVersion}" ] && ((_wasVersion > 0)) && was ${remoteServer}
  # [ -z "${wasVersion}" ] && echo2 "wsadmin_cmd: ERROR setting wasVersion from ${remoteServer}" && return 1
  wsadmin_cmd=${thinClientSOAP}
fi
$Verbose && $Echo ${C} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "\${wsadmin_cmd} -c ${_cmd}"

case "${_cmd}" in
getMixedDetailsOnServers)
  $Debug && echo2 "eval ${wsadmin_cmd} -c \"writeTo('/tmp/getMixedDetailsOnServers.'+sVER+'.'+currentHostName+'.'+cellName+'.${DAY}.csv', libApp.getMixedDetailsOnServers())\""
  eval ${wsadmin_cmd} -c "\"writeTo('/tmp/getMixedDetailsOnServers.'+sVER+'.'+currentHostName+'.'+cellName+'.${DAY}.csv', libApp.getMixedDetailsOnServers())\"" 2>&1 |${LOGG}
  ls -lrt /tmp/getMixedDetailsOnServers* | tail -1 |${LOGG}
;;
getEacbFromCell)
  $Debug && echo2 "eval ${wsadmin_cmd} -c \"writeTo('/tmp/getEacbFromCell.'+sVER+'.'+currentHostName+'.'+cellName+'.${DAY}.csv', getEacbFromCell(False, False, Verbose, cellName, srcLocation='NEY', dstLocation='NEY', srcIP_NAT='', dstIP_NAT='', Transport='TCP'))\""
  eval ${wsadmin_cmd} -c "\"writeTo('/tmp/getEacbFromCell.'+sVER+'.'+currentHostName+'.'+cellName+'.${DAY}.csv', getEacbFromCell(False, False, Verbose, cellName, srcLocation='NEY', dstLocation='NEY', srcIP_NAT='', dstIP_NAT='', Transport='TCP'))\"" 2>&1 |${LOGG}
  ls -lrt /tmp/getEacbFromCell* | tail -1 |${LOGG}
;;
was_install*)
  ${_cmd} 2>&1 |${LOGG}
;;
was_patch*)
  ${_cmd} 2>&1 |${LOGG}
;;
was_checkVersions)
  was_checkVersions -f 2>&1 |${LOGG}
;;
getIpcInfos)
  egrep -v "^#|^$" ${wasDmgrDir}/properties/ipc.client.props | egrep ${properties2Grep} | sed -e "s/=.*$/${B}&${END}/g" 2>&1 |${LOGG}
;;
getSoapInfos)
  egrep -v "^#|^$" ${wasDmgrDir}/properties/soap.client.props | egrep ${properties2Grep} | sed -e "s/=.*$/${B}&${END}/g" 2>&1 |${LOGG}
;;
getSshInfection)
  if [ "${UNAME}" == "AIX" ]; then
    echo "$HOSTNAME: System ssh clean" |${LOGG}
  else
    ssh -G 2>&1 | grep -e illegal -e unknown > /dev/null && echo "$HOSTNAME: System ssh clean" || echo "$HOSTNAME: System ssh infected" |${LOGG}
  fi
;;
getWsadminInfos)
  egrep -v "^#|^$" ${wasDmgrDir}/properties/wsadmin.properties | egrep ${props2Grep} | sed -e "s/=.*$/${B}&${END}/g" 2>&1 |${LOGG}
;;
getAppServerTuningDict)
  $Debug && echo2 "eval ${wsadmin_cmd} -c \"writeTo('/tmp/getAppServerTuningDict.'+sVER+'.'+currentHostName+'.'+cellName+'.${DAY}.csv', libTuning.getAppServerTuningDict(CSV=True))\""
  eval ${wsadmin_cmd} -c "\"writeTo('/tmp/getAppServerTuningDict.'+sVER+'.'+currentHostName+'.'+cellName+'.${DAY}.csv', libTuning.getAppServerTuningDict(CSV=True))\"" 2>&1 |${LOGG}
  ls -lrt /tmp/getAppServerTuningDict* | tail -1 |${LOGG}
;;
showAppServerTuningDict)
  $Debug && echo2 "eval ${wsadmin_cmd} -c \"libTuning.showAppServerTuningDict()\""
  eval ${wsadmin_cmd} -c "\"libTuning.showAppServerTuningDict()\"" 2>&1 |${LOGG}
  ls -lrt /tmp/getMixedDetailsOnServers* | tail -1 |${LOGG}
;;
listServersByNodeName)
  $TTY && ${print} ${G} || ${print} ${g}
  eval ${wsadmin_cmd} -c "\"libConfig.listServersByNodeName()\"" 2>&1 |${LOGG}
  $TTY && $Echo ${G} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME} ${wasVersion}" "local libConfig.listServersByNodeName" OK || $Echo ${g} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME} ${wasVersion}" "remote libConfig.listServersByNodeName" OK
;;
*)
  eval ${wsadmin_cmd} -c "\"${_cmd}\""
;;
esac

if $Verbose; then
  $TTY && $Echo ${C} DATE "wsadmin_cmd ${HOSTNAME}" "\${wsadmin_cmd} -c ${_cmd}" OK || $Echo ${c} DATE "wsadmin_cmd ${remoteUser}@${HOSTNAME}" "\${wsadmin_cmd} -c ${_cmd}" OK
fi
rm -f ${TMP}
#-------------------------------------------------------------
}
