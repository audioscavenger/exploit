createKeystore() {
#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x | x |   |   |   | x |   | APRIA: create self signed CERT in a JKS KEYSTORE                                                   |
# https://www.sslshopper.com/article-most-common-java-keytool-keystore-commands.html
# http://docs.continuent.com/tungsten-replicator-2.2/deployment-ssl-stores.html
# https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html
local variable keyAlias keypass keyalg keystore storepass validity keysize keystorePath
keypass="${defaultPassword}"
keyalg=RSA
storepass="${defaultPassword}"
validity=3650
keysize=2048

local ORG LOC ST CO OU CN dname
ORG="${defaultORG}"
LOC="${defaultLOC}"
ST="${defaultST}"
CO="${defaultCO}"

if (( $# < 4 )); then
  echo2 "${C}${FUNCNAME} ${B}[-dv] ${c}<-k keystore> ${B}[-K storepass] ${c}<-a keyAlias> ${B}[-A keypass] [-c keyalg] [-V validity] [-s keysize]"${END}
  echo2 "${C}${FUNCNAME} ${B}[-n CN] [-O ORG] [-U OU] [-L LOC] [-S ST] [-C CO]"${END}
  echo2 "${n}${FUNCNAME}  ${B}-n  CN*=keyAlias=listenUrl"${END}
  echo2 "${n}${FUNCNAME}  ${B}-O ORG*=${defaultORG}"${END}
  echo2 "${n}${FUNCNAME}  ${B}-U  OU*=project name, depending on the pwd u're running this function"${END}
  echo2 "${n}${FUNCNAME}  ${B}-L LOC*=${defaultLOC}"${END}
  echo2 "${n}${FUNCNAME}  ${B}-S  ST*=${defaultST}"${END}
  echo2 "${n}${FUNCNAME}  ${B}-C  CO*=${defaultCO}"${END}
  return 99
fi

########
# INIT ###########################################################################
########
setJava

! test "${JAVA_HOME}" && ERROR var JAVA_HOME 0 && return 1
! test "${JRE_HOME}" && JRE_HOME=${JAVA_HOME}
[ ! -x "${JRE_HOME}/bin/keytool" ] && ERROR exist ${JRE_HOME}/bin/keytool 0 && return 3

# getopts:
while getopts :dvk:K:a:A:n:V:l:s:O:U:L:S:C: _OPT 2>/dev/null
do
{
  case ${_OPT} in
    d) local Debug=true; local Verbose=true ;;
    v) local Verbose=true ;;
    k) eval keystore="${OPTARG}" ;;
    K) storepass="${OPTARG}" ;;
    a) keyAlias="${OPTARG}" ;;
    A) keypass="${OPTARG}" ;;
    n) CN="${OPTARG}" ;;
    c) keyalg="${OPTARG}" ;;
    V) validity="${OPTARG}" ;;
    s) keysize="${OPTARG}" ;;
    O) ORG="${OPTARG}" ;;
    U) OU="${OPTARG}" ;;
    L) LOC="${OPTARG}" ;;
    S) ST="${OPTARG}" ;;
    C) CO="${OPTARG}" ;;
    *) _NOARGS="${_NOARGS}${_NOARGS+, }-${OPTARG}" ;;
  esac
}
done
shift $((OPTIND - 1))
unset _OPT OPTARG OPTIND
[ "X${_NOARGS}" != "X" ] && ERROR param "${_NOARGS}"

keypass="${storepass}"
! test "${CN}" && CN=${keyAlias}
if ! test "${OU}"; then
  ! test ${PWD##${instancesRootDir}*} && OU="$(echo ${PWD} | cut -d\/ -f 4)"
fi

########
# VERIF ###########################################################################
########
for variable in \
JAVA_HOME \
instancesRootDir \
defaultDomain \
keystore \
storepass \
keyAlias \
keypass \
keyalg \
validity \
keysize \
ORG \
OU \
LOC \
ST \
CO \
CN ;
do
  ! exitOnEmptyVariables $variable && ERROR missing $variable 0 && return 4;
done

keystorePath=$(dirname $(realpath ${keystore}))
[ ! -d "${keystorePath}" ] && ERROR exist_rep "${keystorePath}" 0 && return 5

read user group <<<$(getUserGroup ${keystorePath})
$Debug && echo2 "${m}user:group=${user}:${group}${END}"

########
# MAIN ###########################################################################
########
pathmunge ${JAVA_HOME}/bin
pathmunge ${JRE_HOME}/bin
$Debug && echo2 "${y}PATH=${PATH}${END}"

dname="cn=${CN}, o=${ORG}, ou=${OU}, c=${CO}, st=${ST}, l=${LOC}"
$Verbose && echo2 "${C}dname=${c}${dname}${END}"

keytool -genkey \
-keystore ${keystore} \
-storepass "${storepass}" \
-alias ${keyAlias} \
-keyalg ${keyalg} \
-keypass "${keypass}" \
-validity ${validity} \
-keysize ${keysize} \
-dname "${dname}"

$Debug && echo2 "${m}keytool -list -v -keystore ${keystore} -storepass \"${storepass}\" | grep -w \"${keyAlias}\" ${END}"
$Debug && keytool -list -v -keystore ${keystore} -storepass "${storepass}" || keytool -list -v -keystore ${keystore} -storepass "${storepass}" | grep -w "${keyAlias}"

chown ${user}:${group} ${keystore}

# http://fusesource.com/docs/broker/5.3/security/i382664.html
# Create a certificate signing request for the keyAlias:
# keytool -certreq \
# -keystore ${keystore} \
# -storepass "${storepass}" \
# -alias ${keyAlias} \
# -keypass "${keypass}" \
# -file ${keyAlias}.csr.pem 

# Sign the CSR using your CA:
# openssl ca -config X509CA/openssl.cnf -days 365 -in CertName_csr.pem -out CertName.pem

}
