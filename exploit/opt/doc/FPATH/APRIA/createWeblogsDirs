createWeblogsDirs() {
#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x | x |   |   |   | x |   | APRIA: create links to logs + files for HTTPD weblogs                                              |
local default_htdocDir default_dirs2Scan default_dirs2Link logsDir htdocDir dirs2Scan dir2Scan dir2Link dirs2Link default_dirs2Link dir2Create linkName nbLinks AUTOMATIC TEST 
local LOG LOGG _NOARGS 
AUTOMATIC=false
TEST=false
default_htdocDir=${instancesRootDir}/weblogs/apax/XX/htdocs
default_dirs2Scan="${instancesRootDir} /usr2/projets ${wasNodeLogsDir} ${wasDmgrLogsDir}"
default_dirs2Link=logs
if ! (($#)); then
  ${print} "${C}${FUNCNAME}${c} [-dt] <-a | -h <htdocDir>> [-l <dir2Link> .. ] [ -s <dir2Scan> .. ]\n"
  ${print} "%-${#FUNCNAME}s ${c}-%s${w} %s\n" "" d "Debug (more output)"
  ${print} "%-${#FUNCNAME}s ${c}-%s${w} %s\n" "" t "TEST  (will do nothing)"
  ${print} "%-${#FUNCNAME}s ${nn[1]}(%s=${nn[2]}%s${nn[1]})\n" "" htdocDir "${default_htdocDir}"
  ${print} "%-${#FUNCNAME}s ${nn[1]}(%s=${nn[2]}%s${nn[1]})\n" "" dirs2Scan "${default_dirs2Scan}"
  ${print} "%-${#FUNCNAME}s ${nn[1]}(%s=${nn[2]}%s${nn[1]})\n" "" dirs2Link "${default_dirs2Link}"
  echo
  return 99
fi

while getopts :ah:s:l:dt _OPT 2>/dev/null; do
{
  case ${_OPT} in
    a)  AUTOMATIC=true ;;
    h)  htdocDir="${OPTARG}";;
    s)  dirs2Scan="${dirs2Scan} ${OPTARG}" ;;
    l)  dirs2Link="${dirs2Link} ${OPTARG}" ;;
    d)  local Debug=true ;;
    t)  local Debug=true; TEST=true ;;
    *)  _NOARGS="${_NOARGS}${_NOARGS+, }-${OPTARG}" ;;
  esac
}
done
shift $((OPTIND - 1))
unset _OPT OPTARG OPTIND
# [ "X${_NOARGS}" != "X" ] && ERROR param "${_NOARGS}"

htdocDir=${htdocDir:-${default_htdocDir}}
dirs2Scan=${dirs2Scan:-${default_dirs2Scan}}
dirs2Link=${dirs2Link:-${default_dirs2Link}}
LOG=${htdocDir}/${FUNCNAME}.log
LOGG="tee -a ${LOG}"
nbLinks=0

[ ! -d "${htdocDir}" ] && ERROR exist_rep "${htdocDir}" 0 && return 1
for dir2Scan in ${dirs2Scan}; do                # dir2Scan=/usr2/webs
  [ ! -d "${dir2Scan}" ] && echo2 "WARN: inexistant ${dir2Scan} directory" && continue
  baseDir=${dir2Scan##*/}                       # baseDir=webs
  baseRoot=${dir2Scan%%/${baseDir}*}            # baseRoot=/usr2
  for dir2Link in ${dirs2Link}; do              # dirs2Link=logs
    for logsDir in $(find ${dir2Scan}/ -type d -name ${dir2Link} | grep -v weblogs); do
      dir2Create=${logsDir#/${baseDir}/}        # dir2Create=/usr2/webs/dac/rect/CD/logs
      # dir2Create=${dir2Create%/*}             # dir2Create=/usr2/webs/dac/rect/CD
      linkName=${dir2Create##*/}                # linkName=logs || linkName=CD
      dir2Create=${dir2Create#${baseRoot}/}     # dir2Create=webs/dac/rect/CD/logs
      dir2Create=${dir2Create%/*}               # dir2Create=webs/dac/rect/CD
      $Debug && ${print} "${nn[1]}mkdir -p %${#logsDir}s %s\n" "" "${nn[0]}${htdocDir}/${nn[1]}${dir2Create}"
      $TEST || mkdir -p ${htdocDir}/${dir2Create}
      $Debug && ${print} "${nn[2]}ln -sf   ${nn[1]}%s ${nn[2]}%s\n" "${logsDir}" "${nn[0]}${htdocDir}/${nn[2]}${dir2Create}/${nn[1]}${linkName}"
      ! $TEST && ln -sf ${logsDir} ${htdocDir}/${dir2Create}/${linkName} && nbLinks=$(( nbLinks + 1 ))
    done
    $TEST || $Echo ${g} DATE "${dir2Scan}" "${nbLinks} links created for ${dir2Link} under ${htdocDir}/" OK |${LOGG}
  done
done
}
