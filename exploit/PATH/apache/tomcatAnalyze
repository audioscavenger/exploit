#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x |   |   |   |   | x |   | analyze TOMCAT server.xml to display LISTEN urls and CERT                                          |
# 2014-09-01 11:57:41 | teleservices/ex1v/RW/tomcat-exo162 .. | 127.0.0.1 8011 AJP/1.3  ............................................................................ | START |
# 2014-09-01 11:57:41 | teleservices/ex1v/RW/tomcat-exo162 .. | exos1.ramgamex1.vali.domain.xyz 8012 HTTP/1.1  .................................................... | START |
# 2014-09-01 11:57:41 | teleservices/ex1v/RW/tomcat-exo162 .. | exos1.ramgamex1.vali.domain.xyz 8014 AJP/1.3  ..................................................... | START |
! (($#)) && echo2 "${C}${FUNCNAME}${c} [-f] [-g <trustie-to-grep>] </path2instance | server.xml>${END}\n" && showEnv "ex.[trivmg]" | egrep -v "APACHE|BATCH|EXO|^$" && return 99
local TMP params param tomcatInstance serverXml port protocol address SSLEnabled keystoreFile keystorePass keyAlias truststoreFile truststorePass sslPorts sslPort STATUS POSTGREP FULL attribute IP
local EXO ssoPrivateServerUrl ssoPrivateDns ssoPrivateKeyAlias process
TMP=/tmp/${FUNCNAME}.$RANDOM.tmp
POSTGREP=cat
FULL=false
EXO=false

[ "x$1" == "x-f" ] && FULL=true && shift
[ "x$1" == "x-g" ] && POSTGREP="egrep $2" && FULL=false && shift 2
params=$*

! setJava && ERROR setJava "JAVA not found" 0 && return 4
lsof -o -o 0 -nRPi 2>/dev/null | awk '{if ($9 ~ /TCP|UDP/) {print} else {$8="0 "$8; print}}' >${TMP}

for param in ${params}; do
[ -d "${param}" ] && tomcatInstance=${param} && serverXml=${tomcatInstance}/conf/server.xml
[ -s "${param}" -a "${param##*/}" == "server.xml" ] && serverXml=${param} && tomcatInstance=$(realpath ${param%/*}/..)

[ ! -d "${tomcatInstance}/conf" ] && ERROR exist_rep "${tomcatInstance}/conf" 0 && continue
[ ! -s "${serverXml}" ] && ERROR exist "${serverXml}" 0 && continue

# TEST SPECIAL for EXO instances:
[ "${tomcatInstance}" != "${tomcatInstance%exo*}" ] && EXO=true
if $EXO; then
  [ -s "${tomcatInstance}/gatein/conf/configuration.properties" ] && ssoPrivateServerUrl=$(grep ^sso.private.server.url=https ${tomcatInstance}/gatein/conf/configuration.properties | cut -d= -f2)
  [ -n "$ssoPrivateServerUrl" ] && ssoPrivateServerUrl=${ssoPrivateServerUrl#https://} && ssoPrivateDns=${ssoPrivateServerUrl%:*} && ssoPrivateKeyAlias=${ssoPrivateDns%.${defaultDomain}*}
  [ -z "$ssoPrivateKeyAlias" ] && EXO=false
fi

# get ports and protocols in server.xml:
(xml_read -cl ${serverXml} Server port; xml_read -cl ${serverXml} Connector port protocol address SSLEnabled) |\
while read port protocol address SSLEnabled; do
  # for Server port there is no address nor protocol
  [ -z "${protocol}" ] && protocol="AJP/1.3" && address="127.0.0.1"
  # miscellaneous verifications, coz address can be null, as well as SSLEnabled, and worst if SSLEnabled is set but not address...
  [ "$address" == "true" -o "$address" == "false" ] && SSLEnabled=$address && address="" && SSLEnabled=""
  IP=$(getIP $address)
  command egrep "${IP:-*}" ${TMP} | /bin/grep LISTEN | grep -q $port && STATUS=START || STATUS=STOP
  Echo ${g15} DATE "${tomcatInstance#${instancesRootDir}/}" "$address $port $protocol ${SSLEnabled:+(SSL)}" $STATUS
  test ${SSLEnabled} && sslPorts="${sslPorts}${sslPorts:+ }$port"
done
# done< <(xml_read -cl ${serverXml} Server port; xml_read -cl ${serverXml} Connector port protocol address SSLEnabled)

# now if no SSL enabled in server.xml, seeking for -Djavax.net.ssl.trustStore= and -Djavax.net.ssl.trustStorePassword= in memory
# and, YES, the trustStore in setenv.sh HAS to be the same as the one in server.xml !
if [ -z "${sslPorts}" ]; then
  sslPorts=process
  process=$(ps -ef | grep ${tomcatInstance})
  grep javax.net.ssl ${tomcatInstance}/bin/setenv.sh |\
  tr " " "\n" |\
  awk '/javax.net.ssl.trustStore/ {gsub(/-D/,""); gsub(/\=/," "); print}' |\
  while read attribute value; do
    [ "$attribute" == "javax.net.ssl.trustStore" ] && truststoreFile=$value
    [ "$attribute" == "javax.net.ssl.trustStorePassword" ] && truststorePass="$value"
  done
  # done< <(grep javax.net.ssl ${tomcatInstance}/bin/setenv.sh | tr " " "\n" | awk '/javax.net.ssl.trustStore/ {gsub(/-D/,""); gsub(/\=/," "); print}')
fi

# now, for the ssl keystores:
for sslPort in ${sslPorts}; do
  # tricky test of an integer:
  if ((sslPort)) 2>/dev/null; then
    eval $(xml_read -c ${serverXml} Connector port keystoreFile keystorePass keyAlias truststoreFile truststorePass | grep ${sslPort})
    echo
    echo "${SMUL}${g6}keystoreFile=${c}${SMUL}$keystoreFile ${g6}keystorePass=${g15}$keystorePass ${g6}keyAlias=${c}${SMUL}$keyAlias${END}"
    keystore -p "$keystorePass" $keystoreFile |${DECOLORIZE}| /bin/grep -w "$keyAlias"
    (($? != 0)) && echo2 "${r}missing ${R}$keyAlias${END}!"
  fi
  if [ -n "$truststoreFile" ]; then
    echo
    echo "${SMUL}${g6}truststoreFile=${g15}$truststoreFile ${g6}truststorePass=${g15}$truststorePass${END}"
    if $FULL; then
      keystore -f -p "$truststorePass" $truststoreFile | /bin/egrep "Alias name:|Owner:Issuer:" | command ${POSTGREP}
    else
      if [ "${POSTGREP}" != "cat" ]; then
        keystore -p "$truststorePass" $truststoreFile | command ${POSTGREP}
      else
        printf "%s %s\n" "$(keystore -p "$truststorePass" $truststoreFile | wc -l)" "certificats..."
        if $EXO; then
          keystore -f -p "$truststorePass" $truststoreFile | /bin/egrep "Alias name:|Owner:Issuer:" | /bin/egrep -i "$ssoPrivateDns|$ssoPrivateKeyAlias"
          (($? == 0)) && echo "${g}EXO: ${G}CA detected for ${C}https://$ssoPrivateServerUrl${w} => ${c}ssoPrivateKeyAlias=${C}$ssoPrivateKeyAlias${w} => ${OK}" || echo "${r}EXO: ${R}CA not detected for ${C}https://$ssoPrivateServerUrl${w} => ssoPrivateKeyAlias=${C}$ssoPrivateDns|$ssoPrivateKeyAlias${w} => ${KO}"
        fi
      fi
    fi
  fi
  unset port keystoreFile keystorePass keyAlias truststoreFile truststorePass
done
done
! $Debug && rm -f ${TMP} || echo2 TMP=${TMP}
