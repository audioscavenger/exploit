#@(t)  |UNAME |out|mod|set|sys|net|app|mis| description                                                                                        |
#@(p)  |*     | x |   |   |   |   | x |   | analyze ProxyPassReverse and JkMounts from Includes from httpd.conf                                |
# TODO: is FULL_DISPLAY necessary ? waddabat Verbose ?
local FULL_DISPLAY CSV mainConfFile proxyConfFile regexp JkMounts workerList workersInFile worker knownWorker
CSV=false
FULL_DISPLAY=false

# getopts:
local _OPT OPTIND OPTARG OPTIND _NOARGS
while getopts :cfw:j:xX _OPT 2>/dev/null
do
{
  case ${_OPT} in
    c) CSV=true ;;
    f) FULL_DISPLAY=true ;;
    w) workerList="${OPTARG}" ;;
    j) JkMounts="${OPTARG}" ;;
    x) local Verbose=true ;;
    X) local Debug=true; local Verbose=true ;;
    *) _NOARGS="${_NOARGS}${_NOARGS+, }-${OPTARG}" ;;
  esac
}
done
shift $((OPTIND - 1))
[ "X${_NOARGS}" != "X" ] && ERROR param "${_NOARGS}"

( [ -n "${workerList}" -a -z "${JkMounts}" ] || ! (($#)) ) && echo2 "${C}${FUNCNAME}${c} [-xXcf] [-w \"worker ..\" <-j \"JkMount ..\">] </path/httpd.conf> [regexp]${END}" && return 99
proxyConfFile="$1"
regexp="${2:-.}"

$Debug && echo2 "${m}workerList   =${m}${workerList}${END}"
$Debug && echo2 "${m}JkMounts     =${m}${JkMounts}${END}"
$Debug && echo2 "${B}proxyConfFile=${B}${proxyConfFile} regexp=\"${regexp}\"${END}"

$FULL_DISPLAY && echo2 "${B}${FUNCNAME}: $(realpath ${proxyConfFile})${END}"
awk '{if (/^[[:blank:]]*Include/) {$1=""; system("cat " $0)} else {print}}' "$proxyConfFile" |\
awk -v regexp="${regexp}" -v CSV=$CSV -v HOSTNAME=$HOSTNAME -v proxyConfFile=$(basename "$proxyConfFile") -v workerList="${workerList}" -v JkMounts="${JkMounts}" \
'BEGIN {redirs=1; lastTargetUrl=""; IGNORECASE=1; DEBUG=ENVIRON["Debug"]; w=split(workerList,workers," "); split(JkMounts,Jks," "); }
!/^[:space:]*#/ {
  if (tolower($1) ~ /<virtualhost/) {sub(/>/,"",$NF); m=split($NF,IP,":"); ServerName=""; next}
  if ($1 ~ /ServerName/) {ServerName=$NF; next}
  if (tolower($1) ~ /proxypassreverse/) {
    split($NF,targetUrlFull,"://"); split(targetUrlFull[2],targetUrl,"/")
    if (targetUrl[1] == lastTargetUrl) {next}
    targetDns[redirs, 1]=targetUrlFull[1]; targetDns[redirs, 2]=targetUrl[1]; lastTargetUrl=targetUrl[1]; redirs++; next
  }
  if ($1 == "JkMount" && w > 0) {
    worker = $NF
    if (worker == lastWorker) {next}
    for (j=1; j < w; j++) {
      if (worker != workers[j]) {continue}
      targetDns[redirs, 2]=Jks[j]
      if (DEBUG == "true") {print "targetDns["redirs", 2]",targetDns[redirs, 2];}
    }
    targetDns[redirs, 1]="ajp"; lastWorker=worker; redirs++; next
  }
  # end of virtualhost: now we process the variables we set before:
  if (tolower($1) ~ /<\/virtualhost/) {
    if (m != 2 || redirs == 1) {next}
    if (IP[1] == "*" || IP[1] == "_default_") {IP[1] = HOSTNAME}
    ("host -n "IP[1]" 2>&1")| getline DNS
    if (index(toupper(DNS),"NOT FOUND") != 0) {
      if (DEBUG == "true") {print "DNS NOT FOUND for IP[1]:",IP[1]}
      if (ServerName) {sourceDns="{g8}"ServerName} else {sourceDns=IP[1]}
    } else {
      n=split(DNS,dns," ")
      sub(/.$/,"",dns[n])
      sourceDns=dns[n]
    }
    if (index(DNS,regexp) == 0) {next}
    # print "proxyConfFile",proxyConfFile
    # print "sourceIP",sourceIP
    # print "sourceDns",sourceDns
    # print "sourcePort",sourcePort
    # for (x in IP) print "IP",IP[x]
    sourceIP=IP[1]
    sourcePort=IP[m]
    for (redir=1; redir < redirs; redir++) {
      if (!targetDns[redir, 2]) {continue}
      if (targetDns[redir, 1] ~ "http") {targetColor="{w}"}
      if (targetDns[redir, 1] ~ "https") {targetColor="{y}"}
      if (targetDns[redir, 1] ~ "ajp") {targetColor="{m}"}
      if (DEBUG == "true") {
        print "sourceIP",sourceIP
        print "sourcePort",sourcePort
        print "sourceDns",sourceDns
        # print "targetColor",targetColor
        print "targetDns["redir",2]",targetDns[redir, 2]
      }
      target = targetDns[redir, 2]
      uniqTargetDns[target]++
      # printf "{g3}%s{g8} %s:%s = %s:%s {w}-> %s%s{END}\n",HOSTNAME,sourceIP,sourcePort,sourceDns,sourcePort,targetColor,targetDns[redir, 2]
    }
    # empty targetDns arrays:
    split("", targetDns); redirs=1; m=0; lastTargetUrl=""; lastWorker=""
  }
}
END {
  for (b in uniqTargetDns) { 
    if (CSV == "true") {printf "{g3}%s{g8};%s:%s;%s:%s;{w}%s%s{END}\n",HOSTNAME,sourceIP,sourcePort,sourceDns,sourcePort,targetColor,b}
    else {printf "{g3}%s{g8} %s:%s = %s:%s {w}-> %s%s{END}\n",HOSTNAME,sourceIP,sourcePort,sourceDns,sourcePort,targetColor,b}
  }
}
' | ${COLORIZE} ${LOWS} ${HIGHS}
