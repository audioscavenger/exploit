# https://www.sslshopper.com/article-most-common-java-keytool-keystore-commands.html
# http://docs.continuent.com/tungsten-replicator-2.2/deployment-ssl-stores.html
# https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html
local FULL keystore keypass storepass extension alias2export what outputDir certificate Verbose formatOption outputFormat alias2view aliases2export aliases2remove alias2remove storepasses TRUSTED
storepasses="changeit ${defaultPassword}"
FULL=false
Verbose=false
what=list
outputDir="."
# pem is ascii readable, der is binary
outputFormat=pem
formatOption="-rfc"
TRUSTED=false

if ! (($#)); then
  echo2 "${C}${FUNCNAME}${c} [-d]   [-p storepass] [-e (all|alias ..)    [-F der|pem*] [-o outputDir ]] ${C}<keystore|certificate> ${nn[2]}(pem=ascii der=binary)${END}"
  echo2 "${C}${FUNCNAME}${c} [-d]   [-p storepass] [-i alias2import [-t] <-c certificate> <-k keypass>] ${C}<keystore|certificate> ${nn[2]}${END}"
  echo2 "${C}${FUNCNAME}${c} [-d]   [-p storepass] [-r (alias2remove ..)                              ] ${C}<keystore|certificate> ${nn[2]}${END}"
  echo2 "${C}${FUNCNAME}${c} [-dvf] [-p storepass]                                                      ${C}<keystore|certificate> [alias2view] ${nn[2]}${END}"
  return 99
fi

########
# INIT ###########################################################################
########
# getopts:
local _NOARGS _OPT
while getopts :dvfF:p:e:i:tr:c:o:k: _OPT 2>/dev/null
do
{
  case ${_OPT} in
    d) local Debug=true ;;
    v) Verbose=true ;;
    f) FULL=true ;;
    F) outputFormat="${OPTARG}" ;;
    p) storepasses="${OPTARG}" ;;
    e) what=extract; aliases2export="${aliases2export}${aliases2export:+ }${OPTARG}" ;;
    i) what=import;    alias2import="${OPTARG}" ;;
    t) TRUSTED=true ;;
    r) what=remove;  aliases2remove="${aliases2remove}${aliases2remove:+ }${OPTARG}" ;;
    c) certificate=$(realpath ${OPTARG}) ;;
    o) outputDir="${OPTARG}" ;;
    k) keypass="${OPTARG}" ;;
    *) _NOARGS="${_NOARGS}${_NOARGS+, }-${OPTARG}" ;;
  esac
}
done
shift $((OPTIND - 1))
unset _OPT OPTARG OPTIND
[ "X${_NOARGS}" != "X" ] && ERROR param "${_NOARGS}"

keystore=$(realpath $1)
alias2view=$2

########
# VERIF ###########################################################################
########
for variable in \
keystore ;
do
  ! exitOnEmptyVariables $variable && ERROR missing $variable 0 && return 1;
done

if [ "${what}" == "import" ]; then
  for variable in \
  alias2import \
  certificate \
  keypass ;
  do
    ! exitOnEmptyVariables $variable && ERROR missing $variable 0 && return 2;
  done
  [ ! -s "${certificate}" ] && ERROR exist "${certificate}" 0 && return 4
fi

if [ "${what}" == "export" ]; then
  for variable in \
  aliases2export \
  outputDir \
  outputFormat ;
  do
    ! exitOnEmptyVariables $variable && ERROR missing $variable 0 && return 3;
  done
  [ ! -d "${outputDir}" ] && ERROR exist_rep "${outputDir}" 0 && return 6
fi

if [ "${what}" == "remove" ]; then
  for variable in \
  aliases2remove ;
  do
    ! exitOnEmptyVariables $variable && ERROR missing $variable 0 && return 3;
  done
  [ ! -d "${outputDir}" ] && ERROR exist_rep "${outputDir}" 0 && return 6
fi

case "${outputFormat}" in
pem)  true ;;
der)  unset formatOption ;;
*)    ERROR param "-F ${outputFormat}" 0 && return 7 ;;
esac

[ ! -s "${keystore}" ] && ERROR exist "${keystore}" 0 && return 8
[ "${what}" == "list" ] && test "${alias2view}" && what=viewcert

########
# MAIN ###########################################################################
########
extension=${keystore##*.}
if [ "${extension}" == "crt" ]; then
  grep -q "BEGIN CERTIFICATE" ${keystore} && extension=pem || extension=der
fi

case "${extension}" in
pem|der)
  # http://www.madboa.com/geek/openssl/
  if $FULL; then
    $Debug && echo2 "${m}openssl x509 -inform ${extension} -text -in ${keystore} ${END}"
    openssl x509 -inform ${extension} -text -in ${keystore}
  else
    $Debug && echo2 "${m}openssl x509 -inform ${extension} -text -in ${keystore} ${END}"
    openssl x509 -inform ${extension} -text -in ${keystore} | egrep "Issuer:|Subject:"
  fi
  ;;
jks|*)
  ! setJava && ERROR setJava "JAVA not found" 0 && return 1
  [ ! -x "${JRE_HOME}/bin/keytool" ] && ERROR exist ${JRE_HOME}/bin/keytool 0 && return 2
  
  # test des storepasses
  for storepass in ${storepasses}; do
    $Debug && echo2 "${m}keytool -list -keystore ${keystore} -storepass \"${storepass}\" ${END}"
    keytool -list -keystore ${keystore} -storepass "${storepass}" >/dev/null 2>&1
    (($? == 0)) && break || storepass=""
  done
  [ -z "${storepass}" ] && ERROR storepass "please retry with -p storepass" 0 && return 9

  # http://www.sslshopper.com/article-most-common-java-keytool-keystore-commands.html
  case "${what}" in
  viewcert)
  if $FULL; then
    $Debug && echo2 "${m}keytool -list -v -alias \"${alias2view}\" -keystore ${keystore} -storepass \"${storepass}\""
    keytool -list -v -alias "${alias2view}" -keystore ${keystore} -storepass "${storepass}" 
  else
    $Debug && echo2 "${m}keytool -list -v -alias \"${alias2view}\" -keystore ${keystore} -storepass \"${storepass}\" | egrep \"Alias name:|Owner:|Issuer:\""
    keytool -list -v -alias "${alias2view}" -keystore ${keystore} -storepass "${storepass}" | egrep "Alias name:|Owner:|Issuer:" 
  fi
    ;;
  list)
    if $FULL; then
      $Debug && echo2 "${m}keytool -list -v -keystore ${keystore} -storepass \"${storepass}\""
      keytool -list -v -keystore ${keystore} -storepass "${storepass}"
    elif $Verbose; then
      $Debug && echo2 "${m}keytool -list -v -keystore ${keystore} -storepass \"${storepass}\" | /bin/egrep \"Alias name:|Owner:|Issuer:\""
      keytool -list -v -keystore ${keystore} -storepass "${storepass}" |\
          /bin/egrep "Alias name:|Owner:|Issuer:" |\
            sed -e "s/.$/&${END}${nn[2]}/g" -e "s/Owner:/& /g" -e "s/Alias name:/${c}/g"
    else
      # addtrustexternalca, May 2, 2006, trustedCertEntry,
      $Debug && echo2 "${m}keytool -list -keystore ${keystore} -storepass \"${storepass}\" | tail +7"
      keytool -list -keystore ${keystore} -storepass "${storepass}" | tail +7 |\
        sed -e "/fingerprint/d" -e "s/^\([[:alnum:]_.-]\+\),/${c}&${nn[2]}/g" -e "s/,//g" |\
          awk '{printf "%-64s %2s %3s %4s %s\n",$1,$3,$2,$4,$5}'
      (( ${PIPESTATUS[0]} != 0 )) && ERROR password "wrong password" 0 && return ${PIPESTATUS[0]}
    fi
    ;;
  remove)
    for alias2remove in ${aliases2remove}; do
      $Debug && echo2 "${m}keytool -delete -alias \"${alias2remove}\" -keystore ${keystore} -storepass \"${storepass}\"${END}"
      keytool -delete -alias "${alias2remove}" -keystore ${keystore} -storepass "${storepass}"
      (($? == 0)) && echo "${c}${alias2remove} ${r}removed from ${w}${keystore}"
    done
    ;;
  extract)
    if [ "${aliases2export}" == "all" ]; then
      aliases2export=$(keytool -list -keystore ${keystore} -storepass "${storepass}" | tail +7 | grep -o "^\([[:alnum:]_.-]\+\)," | tr -d ',')
    fi
    for alias2export in ${aliases2export}; do
      $Debug && echo2 "${m}keytool -export -alias \"${alias2export}\" ${formatOption} -file ${outputDir}/${alias2export}.crt.${outputFormat} -keystore ${keystore} -storepass \"${storepass}\"${END}"
      keytool -export -alias "${alias2export}" ${formatOption} -file ${outputDir}/${alias2export}.crt.${outputFormat} -keystore ${keystore} -storepass "${storepass}"
    done
    
    # http://stackoverflow.com/questions/2640691/how-to-export-private-key-from-a-keystore-of-self-signed-certificate
    
# keytool -v -importkeystore -srckeystore .keystore -srcalias mykey -destkeystore myp12file.p12 -deststoretype PKCS12
# Enter destination keystore password:  
# Re-enter new password: 
# Enter source keystore password:  
# [Storing myp12file.p12]
# Now the file myp12file.p12 contains the private key in PKCS12 format

    ;;
  import)
    if $TRUSTED; then
    
    # http://stackoverflow.com/questions/906402/importing-an-existing-x509-certificate-and-private-key-in-java-keystore-to-use-i
  # openssl pkcs12 -export -in server.crt -inkey server.key \
  # -out server.p12 -name some-alias \
  # -CAfile ca.crt -caname root -chain

  # keytool -importkeystore \
  # -deststorepass changeit -destkeypass changeit -destkeystore server.keystore \
  # -srckeystore server.p12 -srcstoretype PKCS12 -srcstorepass some-password \
  # -alias some-alias
               
      $Debug && echo2 "${m}keytool -import -trustcacerts -noprompt -alias \"${alias2import}\" -file ${certificate} -keypass \"${keypass}\" -keystore ${keystore} -storepass \"${storepass}\"${END}"
      keytool -import -trustcacerts -noprompt -alias "${alias2import}" -file ${certificate} -keypass "${keypass}" -keystore ${keystore} -storepass "${storepass}"
    else
      $Debug && echo2 "${m}keytool -import ${trustcacerts} -noprompt -alias \"${alias2import}\" -file ${certificate} -keypass \"${keypass}\" -keystore ${keystore} -storepass \"${storepass}\"${END}"
      keytool -import ${trustcacerts} -noprompt -alias "${alias2import}" -file ${certificate} -keypass "${keypass}" -keystore ${keystore} -storepass "${storepass}"
    fi
    ;;
  esac
  ;;
esac
