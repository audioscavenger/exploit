local outputFormat dstHostname ports port color status srcIP destinationIP command Transport statusOK statusKO colorGreen colorNoir colorRed LOCAL_OPTIONS REMOTE REMOTE_OPTIONS commandSSH sshUser remoteSSH 
# Location;srcHostname;IP;IP NAT;Location;dstHostname;IP;IP NAT;Transport;Port;DATE;status;Protocol;Commentaires;

# http://nakkaya.com/2009/04/15/using-netcat-for-file-transfers/
# receive file:
# nc -l -p 1234 > out.file
# send file:
# dd if=/dev/hda3 | gzip -9 | nc destination 1234
# nc -w 3 destination 1234 < out.file
# receive directory:
# nc -l -p 1234 | uncompress -c | tar xvfp -
# send directory:
# tar cfp - /some/dir | compress -c | nc -w 3 destination 1234

CSV=false
COLORED=true
REMOTE=false
UDP=false
sshUser=${remoteUser:-root}
commandSSH=${remoteSSH:-"command ${ssh} -o ConnectTimeout=1 -qx -l ${sshUser} -T"}
remoteSSH=${remoteProfile:-" . ${DIREXPLOIT}/profile.sh >/dev/null 2>&1 "}

while [[ "x$1" == x-? ]]; do
  case "x$1" in
  x-c)  CSV=true; COLORED=false; REMOTE_OPTIONS="${REMOTE_OPTIONS} -c -n" ;;
  x-d)  local Debug=true; REMOTE_OPTIONS="${REMOTE_OPTIONS} -d" ;;
  x-n)  COLORED=false; REMOTE_OPTIONS="${REMOTE_OPTIONS} -n" ;;
  x-u)  UDP=true; REMOTE_OPTIONS="${REMOTE_OPTIONS} -u"; LOCAL_OPTIONS="${LOCAL_OPTIONS} -u" ;;
  x-r)  REMOTE=true; srcHostname=$2; shift ;;
  x-?)  LOCAL_OPTIONS="${LOCAL_OPTIONS} -$1" ;;
  esac
shift
done

case "${destinationIP%%\.*}" in
22?)  UDP=true ;;
23?)  UDP=true ;;
esac

[ "${srcHostname}" == "${HOSTNAME}" -o "${srcHostname}" == "${FQDN}" ] && REMOTE=false

(($# < 2)) && echo2 "syntax: ${C}${FUNCNAME}${c} [-c] [-n] [-u] [-r <srcHostname>] <dstHostname> < port1 .. > ${K}(-c: CSV output; -n:no colors; -d: Debug; -r: REMOTE exec)${END}" >&2 && return 99
$Debug && echo "$(hostname): netcatt $* (srcHostname=$srcHostname REMOTE=$REMOTE CSV=$CSV COLORED=$COLORED UDP=$UDP)" >&2

dstHostname=$1
shift
ports=$*

########
# MAIN ############################################
########
for port in ${ports}; do
  ! ((port)) && ERROR port "${port} n'est PAS un port !" 0 && return 1
done

if [ $REMOTE == true -a "${srcHostname}" != "DESKTOP" ]; then
  echo "${remoteSSH}; srcHostname=${srcHostname}; netcatt ${REMOTE_OPTIONS} ${dstHostname} ${ports}" | ${commandSSH} ${srcHostname} env STY=$STY env TTY_WIDTH=$TTY_WIDTH /bin/bash 2>&1
  return 0
fi

which netcat >/dev/null 2>&1 && command=netcat || command=nc
! which ${command} >/dev/null 2>&1 && ERROR exist "netcat or nc" 0 && return 255

$CSV && outputFormat="%s;%s;%s;;;%s;%s;;%s;%s;%s;%s\n" || outputFormat="%s%s %s --> %s %s (%s) ${HIGH}%s${END}    %s    %s\n"
statusOK=OK
statusKO=KO
statusNA=NA
colorGreen=""
colorNoir=""
colorRed=""
if $COLORED; then
  statusOK=${OK}
  statusKO=${KO}
  statusNA=${NA}
  colorGreen=${g}
  colorNoir=${K}
  colorRed=${r}
fi

# /!\ srcHostname is NOT a local variable coz it can be exported by the remote ssh command from checkPorts...
if [ "${srcHostname}" != "DESKTOP" ]; then
  srcHostname=${srcHostname:-$(getDNS $(hostname))}
  srcIP=$(getIP ${srcHostname})
else
  srcIP="${srcIP_default}"
fi
destinationIP=$(getIP ${dstHostname})
$UDP && Transport=UDP || Transport=TCP
status=${statusNA}



# echo TODO: netcat -v
# return
# root@dev-unx-jee001[7]/tmp # netcat -w 1 -v dev-unx-ipl001 80
# dev-unx-ipl001.apriarsa.fr [10.211.2.32] 80 (http) : Connection refused
# root@dev-unx-jee001[7]/tmp # netcat -w 1 -v prd-unx-jee001 80
# prd-unx-jee001.apriarsa.fr [10.105.2.34] 80 (http) : Connection timed out








for port in ${ports};do
  if $UDP; then
    $COLORED && color=${colorGreen}
    ${command} ${LOCAL_OPTIONS} -w 1 -z ${dstHostname} ${port} >/dev/null 2>&1
    CR=$?; NbKO=$(( NbKO + CR ))
    (( CR != 0 )) && color=${colorRed} && status=${statusKO} || status=${statusOK}
    printf "${outputFormat}" "${color}" ${srcHostname} ${srcIP:-ERROR} ${dstHostname:-ERROR} ${destinationIP:-ERROR} ${Transport} ${port} ${JOUR} ${status}
  else
    $COLORED && color=${colorGreen}
    ${command} ${LOCAL_OPTIONS} -w 1 -z ${dstHostname} ${port} >/dev/null 2>&1
    CR=$?; NbKO=$(( NbKO + CR ))
    (( CR != 0 )) && color=${colorRed} && status=${statusKO} || status=${statusOK}
    printf "${outputFormat}" "${color}" ${srcHostname} ${srcIP:-ERROR} ${dstHostname:-ERROR} ${destinationIP:-ERROR} ${Transport} ${port} ${JOUR} ${status}
  fi
done

return $CR
